#sidebar TableOfContents

Class header file: [http://code.google.com/p/bwapi/source/browse/trunk/bwapi/include/BWAPI/Error.h# BWAPI/Error.h]

Methods:

  * [#getID getID]
  * [#toString toString]

Non-member methods in Errors namespace:

  * [#getError getError]
  * [#allErrors allErrors]

=== getID ===
int getID();

Returns a unique ID for this error.

=== toString ===
std::string toString();

Returns the name of the error. For example Errors::Insufficient_Minerals.toString() will return a std::string object containing "Insufficient Minerals".

=== getError ===
[Error] getError(std::string &name);

Given the name of ab error, this function will return the error code. For example: Errors::getError("Unbuildable Location") will return Errors::Unbuildable_Location.

=== allErrors ===
std::set<[Error]>& allErrors();

Returns the set of all the error codes, which are listed below.

== Errors ==

  * [#Unit_Not_Visible Unit_Not_Visible]
  * [#Unit_Not_Owned Unit_Not_Owned]
  * [#Incompatible_UnitType Incompatible_UnitType]
  * [#Incompatible_TechType Incompatible_TechType]
  * [#Incompatible_UpgradeType Incompatible_UpgradeType]
  * [#Insufficient_Minerals Insufficient_Minerals]
  * [#Insufficient_Gas Insufficient_Gas]
  * [#Insufficient_Supply Insufficient_Supply]
  * [#Insufficient_Energy Insufficient_Energy]
  * [#Insufficient_Tech Insufficient_Tech]
  * [#Insufficient_Ammo Insufficient_Ammo]
  * [#Unbuildable_Location Unbuildable_Location]
  * [#Out_Of_Range Out_Of_Range]
  * [#Unable_To_Hit Unable_To_Hit]
  * [#None None]
  * [#Unknown Unknown]

=== Unit_Not_Visible ===

Returned if you try to retrieve information about a unit that is not currently visible or is dead. 

=== Unit_Not_Owned ===

Returned when attempting to order a unit that BWAPI does not own (i.e. can't order enemy army to go away ) 

=== {{{Incompatible_UnitType}}} ===

Returned if you do something weird like try to build a Pylon with an SCV, or train Vultures in a Barracks.

=== Incompatible_TechType ===

Returned if you try to research something at the wrong building, or try to use a tech type that is not researched, or if you try to order a unit to use tech that is meant for another unit (i.e. trying order a Zerg Spire to Burrow will return this error) 

=== Incompatible_UpgradeType ===

Returned if you try to upgrade something at the wrong building.

=== Insufficient_Minerals ===

Returned if you try to train or build something without enough minerals.

=== Insufficient_Gas ===

Returned if you try to train or build something without enough vespene gas.

=== Insufficient_Supply ===

Returned if you try to train something without enough supply.

=== Insufficient_Energy ===

Returned if you to do something like try to order a Defiler to cast a Dark Swarm without enough energy. 

=== Insufficient_Tech ===

Returned if you do something like try to train Medics when you don't have an Academy, or try to lay Spider Mines before spider mines have been researched. 

=== Insufficient_Ammo ===

Returned if you do something like try to lay Spider Mines when your Vulture is out of Spider Mines. Same thing with Reavers and Scarabs.

=== Unbuildable_Location ===

Returned if you try to build something on unbuildable terrain (either from the buildability map data or if a unit is in the way). For build tiles that are not visible, we could just use the buildability map data and assume that no units are blocking it (to prevent cheating). 

=== Out_Of_Range ===

Returned if you order an immovable unit, like a Protoss Photon Cannon, to attack a unit that is out of range. 

=== Unable_To_Hit ===

Returned if you do something like order a Vulture to attack a flying unit. 

=== None ===

Used when no error has been encountered

=== Unknown ===

Used when the error code is not recognized can not be determined.