#sidebar TableOfContents

Class header file: [http://code.google.com/p/bwapi/source/browse/trunk/bwapi/include/BWAPI/Player.h# BWAPI/Player.h]

Each player in a match will have his or her own player instance. There is also a neutral player which owns all the neutral units.

Methods:

  * [#getName getName]
  * [#getUnits getUnits]
  * [#getRace getRace]
  * [#playerType playerType]
  * [#getForce getForce]
  * [#isAlliesWith isAlliesWith]
  * [#getID getID]
  * [#getStartLocation getStartLocation]
  * [#isNeutral isNeutral]

  * [#minerals minerals]
  * [#gas gas]
  * [#supplyTotal supplyTotal]
  * [#supplyUsed supplyUsed]

  * [#getAllUnits getAllUnits]
  * [#getCompletedUnits getCompletedUnits]
  * [#getKilledUnits getKilledUnits]
  * [#getDeaths getDeaths]
  * [#getKills getKills]

  * [#researching researching]
  * [#researched researched]
  * [#upgrading upgrading]
  * [#upgradeLevel upgradeLevel]

=== getName ===
std::string getName() const;

Returns the name of the player.

=== getUnits ===
std::set< [Unit]{{{*}}} > getUnits();

Returns the set of units the player own. Note that units loaded into Terran dropships, Terran bunkers, Terran refineries, Protoss assimilators, and Zerg extractors are not yet included in the set.

=== getRace ===
[Race] getRace() const;

Returns the race of the player.

=== playerType ===
[PlayerType] playerType() const;

Returns the type of the player.

=== getForce ===
[Force]{{{*}}} getForce() const;

Returns the force the player is on.

=== isAlliesWith ===
bool isAlliesWith([Player]{{{*}}} player) const;

Not implemented yet. Will return true if this player is allies with the given player.

=== getID ===
int getID() const;

Returns a unique ID for the player.

=== getStartLocation ===
[Misc#TilePosition TilePosition] getStartLocation() const;

Returns the starting location of the player. For the complete set of starting locations for the current map, see [Game]::[Game#getStartLocations getStartLocations].

=== isNeutral ===
bool isNeutral() const;

Returns true if the player is the neutral player.

=== minerals ===
int minerals() const;

Returns the amount of minerals the player has.

=== gas ===
int gas() const;

Returns the amount of vespene gas the player has.

=== supplyTotal ===
int supplyTotal() const;

Returns the total amount of supply the player has.

=== supplyUsed ===
int supplyUsed() const;

Returns how much of the supply is actually being used by units.

=== getAllUnits ===
int getAllUnits([UnitType] type);

Returns the number of all units of the given type.

=== getCompletedUnits ===
int getCompletedUnits([UnitType] type);

Returns the number of completed units of the given type.

=== getKilledUnits ===
int getKilledUnits([UnitType] type);

=== getDeaths ===
int getDeaths([UnitType] unit);

=== getKills ===
int getKills([UnitType] unit);

=== researching ===
bool researching([TechType] tech) const;

Returns true if the player is researching the given tech. To order a unit to research a given tech type, see [Unit]::[Unit#invent invent].

=== researched ===
bool researched([TechType] tech) const;

Returns true if the player has finished researching the given tech. To order a unit to research a given tech type, see [Unit]::[Unit#invent invent].

=== upgrading ===
bool upgrading([UpgradeType] upgrade) const;

Returns true if the player is upgrading the given upgrade. To order a unit to upgrade a given upgrade type, see [Unit]::[Unit#upgrade upgrade].

=== upgradeLevel ===
int upgradeLevel([UpgradeType] upgrade) const;

returns the player's current upgrade level of the given upgrade. To order a unit to upgrade a given upgrade type, see [Unit]::[Unit#upgrade upgrade].