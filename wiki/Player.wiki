#sidebar TableOfContents

Class header file: [http://code.google.com/p/bwapi/source/browse/trunk/bwapi/include/BWAPI/Player.h# BWAPI/Player.h]

Each player in a match will have his or her own player instance. There is also a neutral player which owns all the neutral units.

Methods:

  * [#getID getID]
  * [#getName getName]
  * [#getUnits getUnits]
  * [#getRace getRace]
  * [#playerType playerType]
  * [#getForce getForce]
  * [#isAlly isAlly]
  * [#isEnemy isEnemy]
  * [#isNeutral isNeutral]
  * [#getStartLocation getStartLocation]
  * [#isVictorious isVictorious]
  * [#isDefeated isDefeated]
  * [#leftGame leftGame]

  * [#minerals minerals]
  * [#gas gas]
  * [#cumulativeMinerals cumulativeMinerals]
  * [#cumulativeGas cumulativeGas]
  * [#supplyTotal supplyTotal]
  * [#supplyUsed supplyUsed]

  * [#allUnitCount allUnitCount]
  * [#completedUnitCount completedUnitCount]
  * [#incompleteUnitCount incompleteUnitCount]
  * [#deadUnitCount deadUnitCount]
  * [#killedUnitCount killedUnitCount]

  * [#getUpgradeLevel getUpgradeLevel]
  * [#hasResearched hasResearched]
  * [#isResearching isResearching]
  * [#isUpgrading isUpgrading]

=== getID ===
int getID() const;

Returns a unique ID for the player.

=== getName ===
std::string getName() const;

Returns the name of the player.

=== getUnits ===
const std::set< [Unit]{{{*}}} >& getUnits() const;

Returns the set of units the player own. Note that units loaded into Terran dropships, Terran bunkers, Terran refineries, Protoss assimilators, and Zerg extractors are not yet included in the set.

=== getRace ===
[Race] getRace() const;

Returns the race of the player.

=== playerType ===
[PlayerType] playerType() const;

Returns the type of the player.

=== getForce ===
[Force]{{{*}}} getForce() const;

Returns the force the player is on.

=== isAlly ===
bool isAlly([Player]{{{*}}} player) const;

Returns true if other player is an ally of this player.

=== isEnemy ===
bool isEnemy([Player]{{{*}}} player) const;

Returns true if other player is an enemy of this player.

=== isNeutral ===
bool isNeutral() const;

Returns true if the player is the neutral player.

=== getStartLocation ===
[Misc#TilePosition TilePosition] getStartLocation() const;

Returns the starting location of the player. If complete map information is disabled, this function will return TilePositions::Unknown for enemy players. For the complete set of starting locations for the current map, see [Game]::[Game#getStartLocations getStartLocations].

=== isVictorious ===
bool isVictorious() const;

Returns true if the player has achieved victory.

=== isDefeated ===
bool isDefeated() const;

Returns true if the player has been defeated.

=== leftGame ===
bool leftGame() const;

Returns true if the player left the game.

=== minerals ===
int minerals() const;

Returns the amount of minerals the player has.

=== gas ===
int gas() const;

Returns the amount of vespene gas the player has.

=== cumulativeMinerals ===
int cumulativeMinerals() const;

Returns the cumulative amount of minerals the player has mined up to this point (including the 50 minerals at the start of the game).

=== cumulativeGas ===
int cumulativeGas() const;

Returns the cumulative amount of gas the player has harvested up to this point.

=== supplyTotal ===
int supplyTotal() const;

int supplyTotal(Race race) const;

Returns the total amount of supply the player has. If a race is provided, the total supply for the given race will be returned, otherwise the player's initial race will be used. Supply counts returned by BWAPI are double what you would expect to see from playing the game. This is because zerglings take up 0.5 in-game supply.

=== supplyUsed ===
int supplyUsed() const;

int supplyUsed(Race race) const;

Returns how much of the supply is actually being used by units. If a race is provided, the used supply for the given race will be returned, otherwise the player's initial race will be used. Supply counts returned by BWAPI are double what you would expect to see from playing the game. This is because zerglings take up 0.5 in-game supply.

=== allUnitCount ===
int allUnitCount([UnitType] type) const;

Returns the number of all units of the given type.

=== completedUnitCount ===
int completedUnitCount([UnitType] type) const;

Returns the number of completed units of the given type.

=== incompleteUnitCount ===
int incompleteUnitCount([UnitType] type) const;

Returns the number of incomplete units of the given type. 

=== deadUnitCount ===
int deadUnitCount([UnitType] unit) const;

Returns the number of dead units of the given type. 

=== killedUnitCount ===
int killedUnitCount([UnitType] unit) const;

Returns the number of killed units of the given type. 


=== getUpgradeLevel ===
int getUpgradeLevel([UpgradeType] upgrade) const;

returns the player's current upgrade level of the given upgrade. To order a unit to upgrade a given upgrade type, see [Unit]::[Unit#upgrade upgrade].

=== hasResearched ===
bool hasResearched([TechType] tech) const;

Returns true if the player has finished researching the given tech. To order a unit to research a given tech type, see [Unit]::[Unit#research research].

=== isResearching ===
bool isResearching([TechType] tech) const;

Returns true if the player is researching the given tech. To order a unit to research a given tech type, see [Unit]::[Unit#research reseach].

=== isUpgrading ===
bool isUpgrading([UpgradeType] upgrade) const;

Returns true if the player is upgrading the given upgrade. To order a unit to upgrade a given upgrade type, see [Unit]::[Unit#upgrade upgrade].