#summary How custom AIs can make use of BWAPI

For BWAPI to be a finished API, it should have a simple C++ interface to the outside that can be used directly by custom AIs written in C++ and as a back-end of a LUA interface and possibly high-level AI logic parsers for BWAI's XML build order files or Broodwar's current AI scripts.

This interface should be feature-complete in the sense that any higher-level behaviors (like SCV-auto balance, build order execution, unit micro, etc) could be fully implemented via this interface. Below is an list of methods that such an interface could have. UnitID, PlayerID, ForceID, and StartLocationID are integers. UnitTypeID, UpgradeTypeID, TechTypeID, and RaceID are enums. If you try to get information about UnitIDs that are not visible, most methods will return the corresponding error from the list below.

= Interface =

== Issue commands ==
  * int attackLocation(UnitID unit, int x, int y);
  * int rightClick(UnitID unit, int x, int y);
  * int rightClick(UnitID unit, UnitID target);
  * int train(UnitID unit, UnitTypeID type);
  * int build(UnitID unit, int x, int y, UnitTypeID type);
  * int invent(UnitID unit, TechTypeID tech);
  * int upgrade(UnitID unit, UpgradeTypeID upgrade);
  * int stop(UnitID unit);
  * int holdPosition(UnitID unit);
  * int patrol(UnitID unit, int x, int y);
  * int useTech(UnitID unit,TechTypeID tech);

== Get game information ==
Only units that are visible to the AI are returned to prevent cheating.

  * std::set< ForceID > getForces();
  * std::set< PlayerID > getPlayers();
  * std::set< UnitID > getUnits(PlayerID p);
  * std::set< UnitID > getMinerals();
  * std::set< UnitID > getQeysers();
  * std::set< UnitID > getNeutralUnits();

== Get information about units ==
Can be used on any UnitID
  * int unitVisible(UnitID unit);

If the AI tries to use one of the following methods on a unit that is not visible, an error code will be returned.
  * PlayerID unitOwner(UnitID unit);
  * UnitTypeID unitType(UnitID unit);
  * int unitHealth(UnitID unit);
  * int unitShield(UnitID unit);
  * int unitEnergy(UnitID unit);
  * int unitPositionX(UnitID unit);
  * int unitPositionY(UnitID unit);
  * int unitTileX(UnitID unit);
  * int unitTileY(UnitID unit);
  * UnitID getTarget(UnitID unit);
  * UnitID getOrderTarget(UnitID unit);
  * UnitID getBuildUnit(UnitID unit);
  * int targetPositionX(UnitID unit);
  * int targetPositionY(UnitID unit);
  * OrderID getOrder(UnitID unit);
  * OrderID getSecondaryOrder(UnitID unit);
  * int orderTimer(UnitID unit);
  * int unitExists(UnitID unit);
  * int unitCompleted(UnitID unit);
  * int unitLifted(UnitID unit);
  * int unitBurrowed(UnitID unit);
  * int unitIdle(UnitID unit);
  * int unitCloaked(UnitID unit);
  * int unitDisabled(UnitID unit);
  * int isTraining(UnitID unit);

The following method will return an error code if used on any unit that the AI player does not own.
  * std::list< UnitTypeID > getTrainingQueue(UnitID unit);

== Get information about types of units ==
  * std::string unitTypeName(UnitTypeID type);
  * RaceID unitTypeRace(UnitTypeID type);
  * UnitTypeID whatBuilds(UnitTypeID type);
  * int suppliesConsumed(UnitTypeID type);
  * int suppliesProduced(UnitTypeID type);
  * int maxHealth(UnitTypeID type);
  * int maxShield(UnitTypeID type);
  * int mineralPrice(UnitTypeID type);
  * int gasPrice(UnitTypeID type);
  * int armor(UnitTypeID type);
  * int buildTime(UnitTypeID type);
  * int dimensionLeft(UnitTypeID type);
  * int dimensionUp(UnitTypeID type);
  * int dimensionRight(UnitTypeID type);
  * int dimensionDown(UnitTypeID type);
  * int tileWidth(UnitTypeID type);
  * int tileHeight(UnitTypeID type);
  * int damageFactor(UnitTypeID type);
  * int groundDamage(UnitTypeID type);
  * int produces(UnitTypeID type);
  * int worker(UnitTypeID type);
  * int attacks(UnitTypeID type);
  * int moves(UnitTypeID type);
  * int building(UnitTypeID type);
  * int addon(UnitTypeID type);
  * int flies(UnitTypeID type);
  * int neutral(UnitTypeID type);
  * int organic(UnitTypeID type);
  * int mechanical(UnitTypeID type);

== Get information about our player ==
  * int researching(TechTypeID tech);
  * int researched(TechTypeID tech);
  * int upgrading(UpgradeTypeID upgrade);
  * int getUpgradeLevel(UpgradeTypeID upgrade);
  * int minerals();
  * int gas();
  * int supplyUsed();
  * int supplyTotal();
  * int canBuild(UnitTypeID unit);
  * int canAfford(UnitTypeID unit);
  * int canAfford(TechTypeID tech);
  * int canAfford(UpgradeTypeID upgrade);
  * PlayerID myID();

== Get information about any player ==
  * std::string playerName(PlayerID player);
  * RaceID playerRace(PlayerID player);
  * PlayerTypeID playerType(PlayerID player);
  * int areAllies(PlayerID player1, PlayerID player2);
  * ForceID getForce(PlayerID player);

== Get map information ==
  * int mapWidth();
  * int mapHeight();
  * std::string mapFilename();
  * std::string mapName();
  * bool buildable(int x, int y);
  * bool walkable(int x, int y);
  * bool visible(int x, int y);
Returns a list of all the possible starting location for the given map, not the actual starting locations for the current match.
  * std::set< StartLocationID > getStartLocations();
  * int startLocationX(StartLocationID location);
  * int startLocationY(StartLocationID location);

== Misc ==
  * std::string raceName(RaceID type);
  * int printText(string test);
  * int sendMessage(string test);
  * int shareVision(PlayerID player);
  * int unshareVision(PlayerID player);
  * int formAlliance(PlayerID player);
  * int destroyAlliance(PlayerID player);

== Error Codes ==
  * ERROR_UNIT_NOT_VISIBLE - returned if you try to retrieve information about a unit that is not currently visible or is dead.
  * ERROR_INCOMPATIBLE_UNIT_TYPE - returned if you do something weird like try to build a Pylon with an SCV, or train Vultures in a Barracks.
  * ERROR_UNIT_NOT_OWNED - returned when attempting to order a unit that BWAPI does not own (i.e. can't order enemy army to go away )
  * ERROR_INSUFFICIENT_MINERALS - returned if you try to train or build something without enough minerals
  * ERROR_INSUFFICIENT_GAS - returned if you try to train or build something without enough vespene gas
  * ERROR_INSUFFICIENT_SUPPLY - returned if you try to train something without enough supply
  * ERROR_INSUFFICIENT_ENERGY - returned if you to do something like try to order a Defiler to cast a Dark Swarm without enough energy.
  * ERROR_UNBUILDABLE_LOCATION - returned if you try to build something on unbuildable terrain (either from the buildability map data or if a unit is in the way). For build tiles that are not visible, we could just use the buildability map data and assume that no units are blocking it (to prevent cheating).
  * ERROR_INCOMPATIBLE_TECH_TYPE - returned if you try to research something at the wrong building, or try to use a tech type that is not researched, or if you try to order a unit to use tech that is meant for another unit (i.e. trying order a Zerg Spire to Burrow will return this error)
  * ERROR_INCOMPATIBLE_UPGRADE_TYPE - returned if you try to upgrade something at the wrong building
  * ERROR_INSUFFICIENT_TECH - returned if you do something like try to train Medics when you don't have an Academy, or try to lay Spider Mines before spider mines have been researched, or if your Vulture is out of Spider Mines.