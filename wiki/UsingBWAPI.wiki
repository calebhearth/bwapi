#summary User's guide

*-------------- work in progress ---------------*

This article attempts to explain how your code will interact with Broodwar.

  * BWAPIv3.x
    * [#Control Control]
    * [#BWAPI2 BWAPI2]
    * [#BWAPI1 BWAPI1]
  * [#Comparison Comparison to BWAPIv2.x]

=BWAPIv3.x=
==Control==
BWAPI let's you manipulate Broodwar in the same technical way as a human player would. But like most games, Broodwar computes the game state frame by frame. Without BWAPI, Broodwar runs through these steps:
  * Compute next frame
  * Take user's commands
  * Draw Screen
  * repeat
BWAPI intervenes right where Broodwar processes user's commands, and gives Broodwar AI's commands instead:
  * Compute next frame
  * *AI does it's thing*
  * Take *AI's* commands
  * Draw Screen
  * repeat
Thus your AI, unlike a regular program, is bound by Broodwar's frame cycle. BWAPI explicitely gives control to the AI when the time has come (e.g. via callbacks), and the AI explicitely gives back control (e.g. by returning from those callbacks). During the timeframe where your AI is in control, you may read any data and issue any orders. You may even do so from a different thread than the one which invoked the callback (see Multithreading).

The conrol passing reflects the mathematical representation of an AI. Imagine the AI as a function, that is passed the whole game state as parameter. It returns all orders and shapes that should be issued/drawn this frame. The function is called once each frame.
===BWAPI2===
This interface provides callbacks as means of passing conrol. But since there is only one timeframe, several callbacks are called in the same frame, hence the rule: BWAPI2 always calls onFrame last. Any other callback called before onFrame is in the same timeframe as the subsequent onFrame call. BWAPI2 does not guarantee in what order the other callbacks get called.

===BWAPI1===
This interface does not provide callbacks for passing control. Instead, blocking and polling functions are used. The events represented by BWAPI2's callback functions can be read as part of the game state data BWAPI1 provides each frame.

==Comparison==
The above is only true for the newer releases BWAPIv3.x. In BWAPIv2.x callbacks are called from different internal Broodwar steps and orders are executed directly without caching. As a result, you are not able to issue orders from the onSendText callback.