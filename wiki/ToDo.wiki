Methods that need to be implemented:
  * [Unit]::repair - needed to repair dropships, bunkers, and refineries (otherwise the SCV just enters the unit when using rightClick).
  * [Unit]::morph

  * [Unit]::land - for Terran buildings. lift is working, but not land yet.
  * [Unit]::load
  * [Unit]::unload
  * [Unit]::unloadAll - for bunker, no position parameter
  * [Unit]::unloadAll - with position parameter, for dropships, shuttles, and overloads

  * [Unit]::cancelConstruction
  * [Unit]::haltConstruction
  * [Unit]::cancelTrain - (cancel last)
  * [Unit]::cancelTrain - (cancel unit at specified index in training list)
  * [Unit]::cancelAddon
  * [Unit]::cancelUpgrade
  * [Unit]::cancelResearch

  * [Unit]::[Unit#useTech useTech]
  * [Unit]::[Unit#useTech_2 useTech] (second variation)
  * [Unit]::[Unit#useTech_3 useTech] (third variation)

  * [Unit]::[Unit#isLoaded isLoaded]
  * [Unit]::[Unit#getLoadedUnits getLoadedUnits]

  * [Unit]::currentDirection - will return what direction the unit is facing. Might be able to use BW::Unit::currentDirection (unverified).

  * [Unit]::groundWeaponCooldown - see BW::Unit::groundWeaponCooldown. Probably should return time/frames until the unit can attack again, 0 if the unit is ready to attack. Very useful for micro.
  * [Unit]::airWeaponCooldown - see BW::Unit::airWeaponCooldown
  * [Unit]::spellCooldown - see BW::Unit::spellCooldown

  * [Unit]::getRallyPosition - might be stored as the target position of the building.
  * [Unit]::getRallyUnit - might be stored as the target unit of the building.

  * [Unit]::defenseMatrixPoints

  * [Unit]::defenseMatrixTimer
  * [Unit]::stimTimer
  * [Unit]::ensareTimer
  * [Unit]::lockdownTimer
  * [Unit]::irradiateTimer
  * [Unit]::stasisTimer
  * [Unit]::plagueTimer
  * [Unit]::maelstromTimer
  * [Unit]::removeTimer

  * [Unit]::isBeingHealed - implemented, but function unknown

  * [Unit]::getKillCount

  * Maybe replace [Unit]::[Unit#isDisabled isDisabled] with:
  * [Unit]::isUnpowered - StatusFlags::Disabled (unverified)

  * [Unit]::isLockedDown - perhaps base off of lockdownTimer (unverified)
  * [Unit]::isStasised - perhaps base off of stasisTimer (unverified)

  * [Unit]::[Unit#isVisible isVisible] - needs proper implementation, currently just uses heuristics. One of the [http://code.google.com/p/bwapi/source/browse/trunk/bwapi/BWAPI/Source/BW/UnitStatusFlags.h status flags] may indicate visibility. If not, we could use [http://code.google.com/p/bwapi/source/browse/trunk/bwapi/BWAPI/Source/BW/UnitStatusFlags.h StatusFlags]::RequiresDetection and check the distances and detection radius of each detector unit. Detector unit types (with detection ranges according to [http://starcraft.wikia.com] )
  * Terran_Science_Vessel: 10
  * Terran_Missile_Turret: 11
  * Spell_Scanner_Sweep: unknown
  * Zerg_Overlord: 9 (11 upgraded)
  * Zerg_Spore_Colony: 10
  * Protoss_Observer: 9 (11 upgraded)
  * Protoss_Photon_Cannon: 7


  * [UnitType]::[UnitType#maxEnergy maxEnergy]
  * [UnitType]::airDamage
  * [UnitType]::attackRange
  * [UnitType]::walkSpeed

  * [Player]::[Player#isAlliesWith isAlliesWith]
  * [Game]::[Game#getLatency getLatency] - right now just set to BattlenetLow in constructor.

  * [Game]::drawBox
  * [Game]::drawBoxFilled
  * [Game]::drawBoxLine

  * [Game]::surrender

Error Codes:
  * Make into Enum
  * Add method [Game]::getLastError so user can get the error code if an error occurs.