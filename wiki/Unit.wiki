#sidebar TableOfContents

Class header file: [http://code.google.com/p/bwapi/source/browse/trunk/bwapi/include/BWAPI/Unit.h# BWAPI/Unit.h]

The Unit class is used to get information about individual units as well as issue orders to units.

Methods:

  * [#getOwner getOwner]
  * [#getType getType]
  * [#health health]
  * [#shield shield]
  * [#energy energy]
  * [#getKillCount getKillCount]
  * [#groundWeaponCooldown groundWeaponCooldown]
  * [#airWeaponCooldown airWeaponCooldown]
  * [#spellCooldown spellCooldown]
  * [#defenseMatrixTimer defenseMatrixTimer]
  * [#stimTimer stimTimer]
  * [#ensnareTimer ensnareTimer]
  * [#lockdownTimer lockdownTimer]
  * [#irradiateTimer irradiateTimer]
  * [#stasisTimer stasisTimer]
  * [#plagueTimer plagueTimer]
  * [#maelstromTimer maelstromTimer]
  * [#getPosition getPosition]
  * [#getTilePosition getTilePosition]

  * [#getTarget getTarget]
  * [#getTargetPosition getTargetPosition]
  * [#getOrder getOrder]
  * [#getOrderTarget getOrderTarget]
  * [#getOrderTimer getOrderTimer]
  * [#getSecondaryOrder getSecondaryOrder]
  * [#getBuildUnit getBuildUnit]
  * [#getRemainingBuildTime getRemainingBuildTime]
  * [#getChild getChild]
  * [#getTrainingQueue getTrainingQueue]
  * [#getLoadedUnits getLoadedUnits]

  * [#isAccelerating isAccelerating]
  * [#isBeingHealed isBeingHealed]
  * [#isBlind isBlind]
  * [#isBraking isBraking]
  * [#isBurrowed isBurrowed]
  * [#isCloaked isCloaked]
  * [#isCompleted isCompleted]
  * [#isDisabled isDisabled]
  * [#isIdle isIdle]
  * [#isLifted isLifted]
  * [#isLoaded isLoaded]
  * [#isMoving isMoving]
  * [#isSelected isSelected]
  * [#isSieged isSieged]
  * [#isStartingAttack isStartingAttack]
  * [#isTraining isTraining]
  * [#isUnderStorm isUnderStorm]
  * [#isVisible isVisible]

The following orders can be issued to units:
  * [#attackMove attackMove] - Attack move to a position
  * [#attackUnit attackUnit] - Attack a specific unit
  * [#rightClick rightClick] - Right click on a position
  * [#rightClick_2 rightClick] - Right click on a unit
  * [#train train]
  * [#build build]
  * [#invent research]
  * [#upgrade upgrade]
  * [#stop stop]
  * [#holdPosition holdPosition]
  * [#patrol patrol]
  * [#repair repair]
  * [#morph morph]
  * [#burrow burrow]
  * [#unburrow unburrow]
  * [#siege siege]
  * [#unsiege unsiege]
  * [#cloak cloak]
  * [#decloak decloak]
  * [#lift lift]
  * [#land land]
  * [#load load]
  * [#unload unload]
  * [#unloadAll unloadAll]
  * [#unloadAll_2 unloadAll]

The following orders have not been implemented yet:
  * [#cancelConstruction cancelConstruction]
  * [#haltConstruction haltConstruction]
  * [#cancelTrain cancelTrain]
  * [#cancelTrain_2 cancelTrain]
  * [#cancelAddon cancelAddon]
  * [#cancelUpgrade cancelUpgrade]
  * [#cancelResearch cancelResearch]

  * [#useTech useTech]
  * [#useTech_2 useTech]
  * [#useTech_3 useTech]

=== getOwner ===
[Player]{{{*}}} getOwner() const;

Returns a pointer to the player that owns this unit.

=== getType ===
[UnitType] getType() const;

Returns the type of the unit.

=== health ===
int health() const;

Returns the unit's current amount of health.

=== shield ===
int shield() const;

Returns the unit's current amount of shield.

=== energy ===
int energy() const;

Returns the unit's current amount of energy.

=== getKillCount ===
int getKillCount() const;

Returns the unit's current kill count.

=== groundWeaponCooldown ===
int groundWeaponCooldown() const;

Returns unit's ground weapon cooldown. It is 0 if the unit is ready to attack.

=== airWeaponCooldown ===
int airWeaponCooldown() const;

Returns unit's air weapon cooldown. It is 0 if the unit is ready to attack.

=== spellCooldown ===
int spellWeaponCooldown() const;

Returns unit's ground weapon cooldown. It is 0 if the unit is ready cast a spell.

=== defenseMatrixTimer ===
int defenseMatrixTimer() const;

Returns the time until the defense matrix wears off. 0 -> No defense Matrix present.

=== stimTimer ===
int stimTimer() const;

Returns the time until the stimpack wears off. 0 -> No stimpack boost present.

=== ensnareTimer ===
int ensnareTimer() const;

Returns the time until the ensnare effect wears off. 0 -> No ensnare effect present.

=== lockdownTimer ===
int lockdownTimer() const;

Returns the time until the lockdown wears off. 0 -> No lockdown present.

=== irradiateTimer ===
int irradiateTimer() const;

Returns the time until the radiation wears off. 0 -> No radiation present.

=== stasisTimer ===
int stasisTimer() const;

Returns the time until the stasis field wears off. 0 -> No stasis field present.

=== plagueTimer ===
int plagueTimer() const;

Returns the time until the plague wears off. 0 -> No plague present.

=== maelstromTimer ===
int maelstromTimer() const;

Returns the time until the maelstrom wears off. 0 -> No maelstrom present.

=== getPosition ===
[Misc#Position Position] getPosition() const;

Returns the position of the unit on the map.
=== getTilePosition ===
[Misc#TilePosition TilePosition] getTilePosition() const;

Returns the build tile position of the unit on the map. Useful if the unit is a building.

=== getTarget ===
[Unit]{{{*}}} getTarget() const;

=== getTargetPosition ===
[Misc#Position Position] getTargetPosition() const;

=== getOrder ===
[Order] getOrder() const;

=== getOrderTarget ===
[Unit]{{{*}}} getOrderTarget() const;

=== getOrderTimer ===
int getOrderTimer() const;

=== getSecondaryOrder ===
[Order] getSecondaryOrder() const;

=== getBuildUnit ===
[Unit]{{{*}}} getBuildUnit() const;

=== getRemainingBuildTime ===
int getRemainingBuildTime() const;

Returns the remaining build time of a unit/building that is being constructed.

=== getChild ===
[Unit]{{{*}}} getChild() const;

=== getTrainingQueue ===
std::list< UnitType > getTrainingQueue() const;

Returns the list of units queued up to be trained.

=== getLoadedUnits ===
std::list<Unit{{{*}}}> getLoadedUnits();

Not implemented yet. Will return the list of units loaded, such as in a dropship.

=== isAccelerating ===
bool isAccelerating() const;

Returns true if the unit is currently accelerating.

=== isBeingHealed ===
bool isBeingHealed() const;

Not implemented yet.

=== isBlind ===
bool isBlind() const;

Returns true if the unit is currently blind from a Medic's Optical Flare.

=== isBraking ===
bool isBraking() const;

Returns true if the unit is currently braking/slowing down.

=== isBurrowed ===
bool isBurrowed() const;

Returns true if the unit is a Zerg unit that is current burrowed.

=== isCloaked ===
bool isCloaked() const;

Returns true if the unit is cloaked.

=== isCompleted ===
bool isCompleted() const;

Returns true if the unit has been completed.

=== isDisabled ===
bool isDisabled() const;

Not implemented yet.

=== isIdle ===
bool isIdle() const;

Returns true if the unit is not doing anything.

=== isLifted ===
bool isLifted() const;

Returns true if the unit is a Terran building that is currently lifted off the ground.

=== isLoaded ===
bool isLoaded() const;

Not implemented yet. Will return true if the unit is loaded into another unit (like a drop ship).

=== isMoving===
bool isMoving() const;

Returns true if the unit is moving.

=== isSelected ===
bool isSelected() const;

Returns true if the unit has been selected by the user via the starcraft GUI. Only available if you enable [Misc#Flag Flag]::UserInput during [AIModule]::[AIModule#onStart onStart].

=== isSieged ===
bool isSieged() const;

Returns true if the unit is a Terran Siege Tank that is currently in Siege mode.


=== isStartingAttack ===
bool isStartingAttack() const;

Returns true if the unit is starting to attack.

=== isTraining ===
bool isTraining() const;

Returns true if the unit is training units (i.e. a Barracks training Marines). For the list of units in the queue, see [Unit]::[#getTrainingQueue getTrainingQueue].

=== isUnderStorm ===
bool isUnderStorm() const;

Returns true if the unit is under a Protoss Psionic Storm.

=== isVisible ===
bool isVisible() const;

Returns true if the unit is visible. Incomplete: only based on heuristics right now.

=== attackMove ===
bool attackMove([Misc#Position Position] target);

Orders the unit to attack move to the specified location.

=== attackUnit ===
bool attackUnit([Misc#Position Position] target);

Orders the unit to attack the specified unit.

=== rightClick ===
bool rightClick([Misc#Position Position]target);

Works like the right click in the GUI.

=== rightClick_2 ===
bool rightClick([Unit]{{{*}}} target);

Works like the right click in the GUI. Right click on a mineral patch to order a worker to mine, right click on an enemy to attack it.

=== train ===
bool train([UnitType] type);

Orders this unit to a the specified unit type to the training queue. Note that the player must have sufficient resources to train.

=== build ===
bool build([Misc#TilePosition TilePosition] p, [UnitType] type);

Orders the unit to build the given unit type at the given position. Note that if the player does not have enough resources when the unit attempts to place the building down, the order will fail.

=== research ===
bool research([TechType] tech);

Orders the unit to research the given tech type.

=== upgrade ===
bool upgrade(UpgradeType upgrade);

Orders the unit to upgrade teh given upgrade type.

=== stop ===
bool stop(); 

Orders the unit to stop.

=== holdPosition ===
bool holdPosition();

Orders the unit to hold its position.

=== patrol ===
bool patrol([Misc#Position Position] target);

Orders the unit to patrol between its current position and the specified position.

=== repair ===
bool repair([Unit]{{{*}}} target);

Orders the unit to repair the specified unit. Only Terran SCVs can be ordered to repair, and the target must be a mechanical Terran unit or building.

=== morph ===
bool morph([UnitType] type);

Orders the unit to morph into the specified unit type. Returns false if given a wrong type.

=== burrow ===
bool burrow();

Orders the unit to burrow. Either the unit must be a Zerg Lurker, or the unit must be a Zerg ground unit and burrow tech must be researched.

=== unburrow ===
bool unburrow();

Orders the burrowed unit to unburrow. 

=== siege ===
bool siege();

Orders the unit to siege. Note: unit must be a Terran siege tank.

=== unsiege ===
bool unsiege();

Orders the unit to unsiege. Note: unit must be a Terran siege tank.

=== cloak ===
bool cloak();

Orders the unit to cloak.

=== decloak ===
bool decloak();

Orders the unit to decloak.

=== lift ===
bool lift();

Orders the unit to lift. Note: unit must be a Terran building that can be lifted.

=== land ===
bool land([Misc#TilePosition TilePosition] target);

Orders the unit to land. Note: unit must be a Terran building that is currently lifted.

=== load ===
bool load([Unit]{{{*}}} target);

Orders the unit to load the target unit.

=== unload ===
bool unload([Unit]{{{*}}} target);

Orders the unit to unload the target unit.

=== unloadAll ===
bool unloadAll();

Orders the unit to unload all loaded units at the unit's current position.

=== unloadAll_2 ===
bool unloadAll([Misc#Position Position] target);

Orders the unit to unload all loaded units at the specified location. Unit should be a Terran Dropship, Protoss Shuttle, or Zerg Overlord. If the unit is a Terran Bunker, the units will be unloaded right outside the bunker, like in the first version of unloadAll.

=== cancelConstruction ===
bool cancelConstruction();

Not implemented yet. Will order the building to stop being constructed.

=== haltConstruction ===
bool haltConstruction();

Not implemented yet. Will order the SCV to stop constructing the building.

=== cancelTrain ===
bool cancelTrain();

Not implemented yet. Will order the unit to remove the last unit from its training queue. For a complete list of units in the queue, see [Unit]::[Unit#getTrainingQueue getTrainingQueue].

=== cancelTrain_2 ===
bool cancelTrain(int slot);

Not implemented yet. Will order the unit to remove the specified unit from its training queue.

=== cancelAddon ===
bool cancelAddon();

Not implemented yet. Will order the unit to stop making the addon.

=== cancelUpgrade ===
bool cancelUpgrade();

Not implemented yet. Will order the unit to cancel an upgrade in progress.

=== cancelResearch ===
bool cancelResearch();

Not implemented yet. Will order the unit to cancel a research in progress.

=== useTech ===
void useTech(Tech tech);

Not implemented yet.

=== useTech_2 ===
void useTech(Tech tech, Position position);

Not implemented yet.

=== useTech_3 ===
void useTech(Tech tech, Unit{{{*}}} target);

Not implemented yet.