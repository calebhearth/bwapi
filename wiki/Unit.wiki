#sidebar TableOfContents

Class header file: [http://code.google.com/p/bwapi/source/browse/trunk/bwapi/include/BWAPI/Unit.h# BWAPI/Unit.h]

The Unit class is used to get information about individual units as well as issue orders to units.

Methods:

  * [#getOwner getOwner]
  * [#getType getType]
  * [#health health]
  * [#shield shield]
  * [#energy energy]
  * [#getKillCount getKillCount]
  * [#getPosition getPosition]
  * [#getTilePosition getTilePosition]

  * [#getTarget getTarget]
  * [#getTargetPosition getTargetPosition]
  * [#getOrder getOrder]
  * [#getOrderTarget getOrderTarget]
  * [#getOrderTimer getOrderTimer]
  * [#getSecondaryOrder getSecondaryOrder]
  * [#getBuildUnit getBuildUnit]
  * [#getRemainingBuildTime getRemainingBuildTime]
  * [#getChild getChild]

  * [#isLoaded isLoaded]
  * [#isVisible isVisible]
  * [#isSelected isSelected]
  * [#isCompleted isCompleted]
  * [#isLifted isLifted]
  * [#isBurrowed isBurrowed]
  * [#isIdle isIdle]
  * [#isCloaked isCloaked]
  * [#isDisabled isDisabled]
  * [#isTraining isTraining]
  * [#getTrainingQueue getTrainingQueue]

The following orders can be issued to units:
  * [#attackMove attackMove] - Attack move to a posiion
  * [#rightClick rightClick] - Right click on a position
  * [#rightClick_2 rightClick] - Right click on a unit
  * [#train train]
  * [#build build]
  * [#invent invent]
  * [#upgrade upgrade]

The following orders have not been implemented yet:
  * [#stop stop]
  * [#holdPosition holdPosition]
  * [#patrol patrol]
  * [#useTech useTech]
  * [#useTech_2 useTech]
  * [#useTech_3 useTech]

Possible methods we could add:
  * [#getLoadedUnits getLoadedUnits]

=== getOwner ===
[Player]{{{*}}} getOwner() const;

Returns a pointer to the player that owns this unit.

=== getType ===
[UnitType] getType() const;

Returns the type of the unit.

=== health ===
int health() const;

Returns the unit's current amount of health.

=== shield ===
int shield() const;

Returns the unit's current amount of shield.

=== energy ===
int energy() const;

Returns the unit's current amount of energy.

=== getKillCount
int getKillCount() const;

Returns the unit's current kill count.

=== getPosition ===
[Misc#Position Position] getPosition() const;

Returns the position of the unit on the map.
=== getTilePosition ===
[Misc#TilePosition TilePosition] getTilePosition() const;

Returns the build tile position of the unit on the map. Useful if the unit is a building.

=== getTarget ===
[Unit]{{{*}}} getTarget() const;

=== getTargetPosition ===
[Misc#Position Position] getTargetPosition() const;

=== getOrder ===
[Order] getOrder() const;

=== getOrderTarget ===
[Unit]{{{*}}} getOrderTarget() const;

=== getOrderTimer ===
int getOrderTimer() const;

=== getSecondaryOrder ===
[Order] getSecondaryOrder() const;

=== getBuildUnit ===
[Unit]{{{*}}} getBuildUnit() const;

=== getRemainingBuildTime ===
int getRemainingBuildTime() const;

Returns the remaining build time of a unit/building that is being constructed.

=== getChild ===
[Unit]{{{*}}} getChild() const;

=== isLoaded ===
bool isLoaded() const;

Not implemented yet. Will return true if the unit is loaded into another unit (like a drop ship).

=== isVisible ===
bool isVisible() const;

Returns true if the unit is visible. Incomplete: only based on heuristics right now.

=== isSelected ===
bool isSelected() const;

Returns true if the unit has been selected by the user via the starcraft GUI. Only available if you enable [Misc#Flag Flag]::UserInput during [AIModule]::[AIModule#onStart onStart].

=== isCompleted ===
bool isCompleted() const;

Returns true if the unit has been completed. Used for buildings.

=== isLifted ===
bool isLifted() const;

Returns true if the unit is a Terran building that is currently lifted off the ground.

=== isBurrowed ===
bool isBurrowed() const;

Returns true if the unit is a Zerg unit that is current burrowed.

=== isIdle ===
bool isIdle() const;

Returns true if the unit is not doing anything.

=== isCloaked ===
bool isCloaked() const;

Returns true if the unit is cloaked. (Does this work as expected for units that have cloaking for free, like Dark Templars?)

=== isDisabled ===
bool isDisabled() const;


=== isTraining ===
bool isTraining() const;

Returns true if the unit is training units (i.e. a Barracks training Marines). For the list of units in the queue, see [Unit]::[#getTrainingQueue getTrainingQueue].

=== getTrainingQueue ===
std::list< UnitType > getTrainingQueue() const;

Returns the list of units queued up to be trained.

=== attackMove ===
void attackMove([Misc#Position Position] target);

=== rightClick ===
void rightClick([Misc#Position Position]target);

Works like the right click in the GUI.

=== rightClick_2 ===
void rightClick([Unit]{{{*}}} target);

Works like the right click in the GUI. Right click on a mineral patch to order a worker to mine, right click on an enemy to attack it.

=== train ===
void train([UnitType] type);

Orders this unit to a the specified unit type to the training queue. Note that the player must have sufficient resources to train.

=== build ===
void build([Misc#TilePosition TilePosition] p, [UnitType] type);

Orders the unit to build the given unit type at the given position. Note that if the player does not have enough resources when the unit attempts to place the building down, the order will fail.

=== invent ===
void invent([TechType] tech);

Orders the unit to research the given tech type.

=== upgrade ===
void upgrade(UpgradeType upgrade);

Orders the unit to upgrade teh given upgrade type.

=== stop ===
int stop(); 

Not implemented yet. Will order the unit to stop.

=== holdPosition ===
void holdPosition();

Not implemented yet. Will order the unit to hold position.

=== patrol ===
void patrol([Misc#Position Position] target);

Not implemented yet. Will order the unit to patrol between its current position and the specified position.

=== useTech ===
void useTech(Tech tech);

Not implemented yet.

=== useTech_2 ===
void useTech(Tech tech, Position position);

Not implemented yet.

=== useTech_3 ===
void useTech(Tech tech, Unit{{{*}}} target);

Not implemented yet.

=== getLoadedUnits ===
std::list<Unit{{{*}}}> getLoadedUnits();

Would return the list of units loaded, such as in a dropship.