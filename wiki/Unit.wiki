#sidebar TableOfContents

Class header file: [http://code.google.com/p/bwapi/source/browse/trunk/bwapi/include/BWAPI/Unit.h BWAPI/Unit.h]

The Unit class is used to get information about individual units as well as issue orders to units. Each unit in the game has a unique Unit object, and Unit objects are not deleted until the end of the match (so you don't need to worry about unit pointers becoming invalid).

Note: There are 4 tiers of unit accessibility that determine which functions AIs will have access to. If the Complete Map Information cheat flag is enabled, you have perfect information of every unit. Otherwise, the functions that will return information will be limited depending on the unit's visibility. To learn more about unit accessibility, read the [BWAPIOverview BWAPI Overview] page.

Methods:

  * [#getID getID]
  * [#getPlayer getPlayer]
  * [#getType getType]
  * [#getPosition getPosition]
  * [#getTilePosition getTilePosition]
  * [#getAngle getAngle]
  * [#getVelocityX getVelocityX]
  * [#getVelocityY getVelocityY]
  * [#getHitPoints getHitPoints]
  * [#getShields getShields]
  * [#getEnergy getEnergy]
  * [#getResources getResources]

  * [#getDistance getDistance]
  * [#hasPath hasPath]
  * [#getUpgradeLevel getUpgradeLevel]

  * [#getInitialType getInitialType]
  * [#getInitialPosition getInitialPosition]
  * [#getInitialTilePosition getInitialTilePosition]
  * [#getInitialHitPoints getInitialHitPoints]
  * [#getInitialResources getInitialResources]

  * [#getKillCount getKillCount]
  * [#getInterceptorCount getInterceptorCount]
  * [#getScarabCount getScarabCount]
  * [#getSpiderMineCount getSpiderMineCount]
  * [#getGroundWeaponCooldown getGroundWeaponCooldown]
  * [#getAirWeaponCooldown getAirWeaponCooldown]
  * [#getSpellCooldown getSpellCooldown]
  * [#getDefenseMatrixPoints getDefenseMatrixPoints]

  * [#getDefenseMatrixTimer getDefenseMatrixTimer]
  * [#getEnsnareTimer getEnsnareTimer]
  * [#getIrradiateTimer getIrradiateTimer]
  * [#getLockdownTimer getLockdownTimer]
  * [#getMaelstromTimer getMaelstromTimer]
  * [#getOrderTimer getOrderTimer]
  * [#getPlagueTimer getPlagueTimer]
  * [#getRemoveTimer getRemoveTimer]
  * [#getStasisTimer getStasisTimer]
  * [#getStimTimer getStimTimer]

  * [#getBuildType getBuildType]
  * [#getTrainingQueue getTrainingQueue]
  * [#getTech getTech]
  * [#getUpgrade getUpgrade]
  * [#getRemainingBuildTime getRemainingBuildTime]
  * [#getRemainingTrainTime getRemainingTrainTime]
  * [#getRemainingResearchTime getRemainingResearchTime]
  * [#getRemainingUpgradeTime getRemainingUpgradeTime]
  * [#getBuildUnit getBuildUnit]

  * [#getTarget getTarget]
  * [#getTargetPosition getTargetPosition]
  * [#getOrder getOrder]
  * [#getOrderTarget getOrderTarget]
  * [#getSecondaryOrder getSecondaryOrder]
  * [#getRallyPosition getRallyPosition]
  * [#getRallyUnit getRallyUnit]
  * [#getAddon getAddon]
  * [#getNydusExit getNydusExit]

  * [#getTransport getTransport]
  * [#getLoadedUnits getLoadedUnits]
  * [#getCarrier getCarrier]
  * [#getInterceptors getInterceptors]
  * [#getHatchery getHatchery]
  * [#getLarva getLarva]

  * [#exists exists]
  * [#hasNuke hasNuke]
  * [#isAccelerating isAccelerating]
  * [#isAttacking isAttacking]
  * [#isBeingConstructed isBeingConstructed]
  * [#isBeingGathered isBeingGathered]
  * [#isBeingHealed isBeingHealed]
  * [#isBlind isBlind]
  * [#isBraking isBraking]
  * [#isBurrowed isBurrowed]
  * [#isCarryingGas isCarryingGas]
  * [#isCarryingMinerals isCarryingMinerals]
  * [#isCloaked isCloaked]
  * [#isCompleted isCompleted]
  * [#isConstructing isConstructing]
  * [#isDefenseMatrixed isDefenseMatrixed]
  * [#isDetected isDetected]
  * [#isEnsnared isEnsnared]
  * [#isFollowing isFollowing]
  * [#isGatheringGas isGatheringGas]
  * [#isGatheringMinerals isGatheringMinerals]
  * [#isHallucination isHallucination]
  * [#isHoldingPosition isHoldingPosition]
  * [#isIdle isIdle]
  * [#isIrradiated isIrradiated]
  * [#isLifted isLifted]
  * [#isLoaded isLoaded]
  * [#isLockedDown isLockedDown]
  * [#isMaelstrommed isMaelstrommed]
  * [#isMorphing isMorphing]
  * [#isMoving isMoving]
  * [#isParasited isParasited]
  * [#isPatrolling isPatrolling]
  * [#isPlagued isPlagued]
  * [#isRepairing isRepairing]
  * [#isResearching isResearching]
  * [#isSelected isSelected]
  * [#isSieged isSieged]
  * [#isStartingAttack isStartingAttack]
  * [#isStasised isStasised]
  * [#isStimmed isStimmed]
  * [#isTraining isTraining]
  * [#isUnderStorm isUnderStorm]
  * [#isUnpowered isUnpowered]
  * [#isUpgrading isUpgrading]
  * [#isVisible isVisible]

  * [#issueCommand issueCommand]

The following commands can be issued to units:

  * [#attackMove attackMove  (Position)]
  * [#attackUnit attackUnit  (Unit)]
  * [#build build  (TilePosition, UnitType)]
  * [#buildAddon buildAddon  (UnitType)]
  * [#train train  (UnitType)]
  * [#morph morph  (UnitType)]
  * [#research research  (TechType)]
  * [#upgrade upgrade  (UpgradeType)]
  * [#setRallyPosition setRallyPosition  (Position)]
  * [#setRallyUnit setRallyUnit  (Unit)]
  * [#move move  (Position)]
  * [#patrol patrol  (Position)]
  * [#holdPosition holdPosition]
  * [#stop stop]
  * [#follow follow  (Unit)]
  * [#gather gather  (Unit)]
  * [#returnCargo returnCargo]
  * [#repair repair  (Unit)]
  * [#burrow burrow]
  * [#unburrow unburrow]
  * [#cloak cloak]
  * [#decloak decloak]
  * [#siege siege]
  * [#unsiege unsiege]
  * [#lift lift]
  * [#land land  (TilePosition)]
  * [#load load  (Unit)]
  * [#unload unload  (Unit)]
  * [#unloadAll unloadAll]
  * [#unloadAll unloadAll  (Position)]
  * [#rightClick rightClick  (Position)]
  * [#rightClick rightClick  (Unit)]
  * [#haltConstruction haltConstruction]
  * [#cancelConstruction cancelConstruction]
  * [#cancelAddon cancelAddon]
  * [#cancelTrain cancelTrain]
  * [#cancelTrain cancelTrain  (Slot)]
  * [#cancelMorph cancelMorph]
  * [#cancelResearch cancelResearch]
  * [#cancelUpgrade cancelUpgrade]
  * [#useTech useTech  (TechType)]
  * [#useTech useTech  (TechType, Position)]
  * [#useTech useTech  (TechType, Unit)]

=== getID ===
int getID() const;

Returns a unique ID for this unit.

=== getPlayer ===
[Player]{{{*}}} getPlayer() const;

Returns a pointer to the player that owns this unit.

=== getType ===
[UnitType] getType() const;

Returns the current type of the unit.

=== getPosition ===
[Misc#Position Position] getPosition() const;

Returns the position of the unit on the map.

=== getTilePosition ===
[Misc#TilePosition TilePosition] getTilePosition() const;

Returns the build tile position of the unit on the map. Useful if the unit is a building. The tile position is of the top left corner of the building.

=== getAngle ===
double getAngle() const;

Returns the direction the unit is facing, measured in radians. An angle of 0 means the unit is facing east.

=== getVelocityX ===
double getVelocityX() const;

Returns the x component of the unit's velocity, measured in pixels per frame.

=== getVelocityY ===
double getVelocityY() const;

Returns the y component of the unit's velocity, measured in pixels per frame.

=== getHitPoints ===
int getHitPoints() const;

Returns the unit's current amount of hit points.

=== getShields ===
int getShields() const;

Returns the unit's current amount of shields.

=== getEnergy ===
int getEnergy() const;

Returns the unit's current amount of energy.

=== getResources ===
int getResources() const;

Returns the unit's current amount of containing resources. Useful for determining how much minerals are left in a mineral patch, or how much gas is left in a geyser (can also be called on a refinery/assimilator/extractor).

=== getDistance ===
double getDistance([Unit]{{{*}}} target) const;

Returns the edge-to-edge distance between the current unit and the target unit.

=== getDistance ===
double getDistance([Misc#Position Position] target) const;

Returns the distance from the edge of the current unit to the target position.

=== hasPath ===
bool UnitImpl::hasPath([Misc#Position Position] target);

Returns true if the target is on the same island as the unit, and false if the unit supposedly can't reach the destination target.

=== getUpgradeLevel ===
int getUpgradeLevel([UpgradeType] upgrade) const;

Returns true if the owner of this player has upgraded the given upgrade type, and this unit is affected by this upgrade.

=== getInitialType ===
[UnitType] getInitialType() const;

Returns the initial type of the unit or Unknown if it wasn't a neutral unit at the beginning of the game.

=== getInitialPosition ===
[Misc#Position Position] getInitialPosition() const;

Returns the initial position of the unit on the map, or Positions::Unknown if the unit wasn't a neutral unit at the beginning of the game.

=== getInitialTilePosition ===
[Misc#TilePosition TilePosition] getInitialTilePosition() const;

Returns the initial build tile position of the unit on the map, or TilePositions::Unknown if the unit wasn't a neutral unit at the beginning of the game. The tile position is of the top left corner of the building.

=== getInitialHitPoints ===
int getInitialHitPoints() const;

Returns the unit's initial amount of hit points, or 0 if it wasn't a neutral unit at the beginning of the game.

=== getInitialResources ===
int getInitialResources() const;

Returns the unit's initial amount of containing resources, or 0 if the unit wasn't a neutral unit at the beginning of the game.

=== getKillCount ===
int getKillCount() const;

Returns the unit's current kill count.

=== getInterceptorCount ===
int getInterceptorCount() const;

Returns the number of interceptors the Protoss Carrier has.

=== getScarabCount ===
int getScarabCount() const;

Returns the number of scarabs in the Protoss Reaver.

=== getSpiderMineCount ===
int getSpiderMineCount() const;

Returns the number of spider mines in the Terran Vulture.

=== getGroundWeaponCooldown ===
int getGroundWeaponCooldown() const;

Returns unit's ground weapon cooldown. It is 0 if the unit is ready to attack.

=== getAirWeaponCooldown ===
int getAirWeaponCooldown() const;

Returns unit's air weapon cooldown. It is 0 if the unit is ready to attack.

=== getSpellCooldown ===
int getSpellCooldown() const;

Returns unit's spell cooldown. It is 0 if the unit is ready to cast a spell.

=== getDefenseMatrixPoints ===
int getDefenseMatrixPoints() const;

Returns the remaining hit points of the defense matrix. Initially a defense Matrix has 250 points.

See also: [Unit]::[Unit#getDefenseMatrixTimer getDefenseMatrixTimer], [Unit]::[Unit#isDefenseMatrixed isDefenseMatrixed].

=== getDefenseMatrixTimer ===
int getDefenseMatrixTimer() const;

Returns the time until the defense matrix wears off. 0 -> No defense Matrix present.

=== getEnsnareTimer ===
int getEnsnareTimer() const;

Returns the time until the ensnare effect wears off. 0 -> No ensnare effect present.

=== getIrradiateTimer ===
int getIrradiateTimer() const;

Returns the time until the radiation wears off. 0 -> No radiation present.

=== getLockdownTimer ===
int getLockdownTimer() const;

Returns the time until the lockdown wears off. 0 -> No lockdown present.

=== getMaelstromTimer ===
int getMaelstromTimer() const;

Returns the time until the maelstrom wears off. 0 -> No maelstrom present.

=== getOrderTimer ===
int getOrderTimer() const;

=== getPlagueTimer ===
int getPlagueTimer() const;

Returns the time until the plague wears off. 0 -> No plague present.

=== getRemoveTimer ===
int getRemoveTimer() const;

Returns the amount of time until the unit is removed, or 0 if the unit does not have a remove timer. Used to determine how much time remains before hallucinated units, dark swarm, etc have until they are removed.

=== getStasisTimer ===
int getStasisTimer() const;

Returns the time until the stasis field wears off. 0 -> No stasis field present.

=== getStimTimer ===
int getStimTimer() const;

Returns the time until the stimpack wears off. 0 -> No stimpack boost present.

=== getBuildType ===
[UnitType] getBuildType() const;

Returns the building type a worker is about to construct. If the unit is a morphing Zerg unit or an incomplete building, this returns the UnitType the unit is about to become upon completion.

=== getTrainingQueue ===
std::list< [UnitType] > getTrainingQueue() const;

Returns the list of units queued up to be trained.

See also: [Unit]::[Unit#train train], [Unit]::[Unit#cancelTrain cancelTrain], [Unit]::[Unit#isTraining isTraining].

=== getTech ===
[TechType] getTech() const;

Returns the tech that the unit is currently researching. If the unit is not researching anything, [TechTypes]::None is returned.

See also: [Unit]::[Unit#research research], [Unit]::[Unit#cancelResearch cancelResearch], [Unit]::[Unit#isResearching isResearching], [Unit]::[Unit#getRemainingResearchTime getRemainingResearchTime].

=== getUpgrade ===
[UpgradeType] getUpgrade() const;

Returns the upgrade that the unit is currently upgrading. If the unit is not upgrading anything, [UpgradeTypes]::None is returned.

See also: [Unit]::[Unit#upgrade upgrade], [Unit]::[Unit#cancelUpgrade cancelUpgrade], [Unit]::[Unit#isUpgrading isUpgrading], [Unit]::[Unit#getRemainingUpgradeTime getRemainingUpgradeTime].

=== getRemainingBuildTime ===
int getRemainingBuildTime() const;

Returns the remaining build time of a unit/building that is being constructed.

=== getRemainingTrainTime ===
int getRemainingTrainTime() const;

Returns the remaining time of the unit that is currently being trained. If the unit is a Hatchery, Lair, or Hive, this returns the amount of time until the next larva spawns, or 0 if the unit already has 3 larva.

=== getRemainingResearchTime ===
int getRemainingResearchTime() const;

Returns the amount of time until the unit is done researching its current tech. If the unit is not researching anything, 0 is returned.

See also: [Unit]::[Unit#research research], [Unit]::[Unit#cancelResearch cancelResearch], [Unit]::[Unit#isResearching isResearching], [Unit]::[Unit#getTech getTech].

=== getRemainingUpgradeTime ===
int getRemainingUpgradeTime() const;

Returns the amount of time until the unit is done upgrading its current upgrade. If the unit is not upgrading anything, 0 is returned.

See also: [Unit]::[Unit#upgrade upgrade], [Unit]::[Unit#cancelUpgrade cancelUpgrade], [Unit]::[Unit#isUpgrading isUpgrading], [Unit]::[Unit#getUpgrade getUpgrade].

=== getBuildUnit ===
[Unit]{{{*}}} getBuildUnit() const;

If the unit is an SCV that is constructing a building, this will return the building it is constructing. If the unit is a Terran building that is being constructed, this will return the SCV that is constructing it.

=== getTarget ===
[Unit]{{{*}}} getTarget() const;

Generally returns the appropriate target unit after issuing an order that accepts a target unit (i.e. attack, repair, gather, follow, etc.). To check for a target that has been acquired automatically (without issuing an order) see getOrderTarget.

=== getTargetPosition ===
[Misc#Position Position] getTargetPosition() const;

Returns the target position the unit is moving to (provided a valid path to the target position exists).

=== getOrder ===
[Order] getOrder() const;

Returns the [Order] that this unit is currently executing.

=== getOrderTarget ===
[Unit]{{{*}}} getOrderTarget() const;

This is usually set when the low level unit AI acquires a new target automatically. For example if an enemy probe comes in range of your marine, the marine will start attacking it, and getOrderTarget will be set in this case, but not getTarget.

=== getSecondaryOrder ===
[Order] getSecondaryOrder() const;

Returns the secondary [Order] that this unit is currently executing.

=== getRallyPosition ===
[Misc#Position Position] getRallyPosition() const;

Returns the position the building is rallied to. If the building does not produce units, Positions::None is returned.

See also: [Unit]::[Unit#setRallyPosition setRallyPosition], [Unit]::[Unit#setRallyUnit setRallyUnit], [Unit]::[Unit#getRallyUnit getRallyUnit].

=== getRallyUnit ===
[Unit]{{{*}}} getRallyUnit() const;

Returns the unit the building is rallied to. If the building is not rallied to any unit, NULL is returned.

See also: [Unit]::[Unit#setRallyPosition setRallyPosition], [Unit]::[Unit#setRallyUnit setRallyUnit], [Unit]::[Unit#getRallyPosition getRallyPosition].

=== getAddon ===
[Unit]{{{*}}} getAddon() const;

Returns the add-on of this unit, or NULL if the unit doesn't have an add-on.

=== getNydusExit ===
[Unit]{{{*}}} getNydusExit() const;

Returns the Nydus Canal unit that is connected to this Nydus Canal, or NULL if the unit doesn't have a connecting Nydus Canal.

=== getTransport ===
[Unit]{{{*}}} getTransport() const;

Returns the dropship, shuttle, overlord, or bunker that is this unit is loaded in to.

=== getLoadedUnits ===
std::set<[Unit]{{{*}}}> getLoadedUnits() const;

Returns the set of the units loaded into a Terran Bunker, Terran Dropship, Protoss Shuttle, Protoss Carrier, or Zerg Overlord.

=== getCarrier ===
[Unit]{{{*}}} getCarrier() const;

Returns the carrier that this unit belongs to, or NULL if this unit is not an Interceptor or if its carrier has recently been destroyed.

=== getInterceptors ===
std::set<[Unit]{{{*}}}> getInterceptors() const;

Returns the set of interceptors owned by this carrier. The interceptors inside the carrier can be obtained via getLoadedUnits, while the interceptors outside of the carrier is the difference of these two sets.

=== getHatchery ===
[Unit]{{{*}}} getHatchery() const;

For Zerg Larva, this returns the Hatchery, Lair, or Hive unit this Larva was spawned from. For all other unit types this function returns NULL.

=== getLarva ===
std::set<[Unit]{{{*}}}> getLarva() const;

Returns the set of larva spawned by this unit. If the unit has no larva, or is not a Hatchery, Lair, or Hive, this function returns an empty set. Equivalent to clicking "Select Larva" from the Starcraft GUI.

=== exists ===
bool exists() const;

3 cases to consider:

  * If exists() returns true, the unit exists.
  * If exists() returns false and the unit is owned by self(), then the unit does not exist.
  * If exists() returns false and the unit is not owned by self(), then the unit may or may not exist.

See also: [Unit]::[Unit#isVisible isVisible].

=== hasNuke ===
bool hasNuke() const;

Returns true if the unit is a Terran Nuclear Missile Silo and has a Terran Nuclear Missile trained and ready to go.

=== isAccelerating ===
bool isAccelerating() const;

Returns true if the unit is currently accelerating.

=== isAttacking ===
bool isAttacking() const;

Returns true if the unit is currently attacking.

=== isBeingConstructed ===
bool isBeingConstructed() const;

Returns true if the unit is being constructed. Always true for incomplete Protoss and Zerg buildings, and true for incomplete Terran buildings that have an SCV constructing them. If the SCV halts construction, isBeingConstructed will return false.

See also: [Unit]::[Unit#build build], [Unit]::[Unit#cancelConstruction cancelConstruction], [Unit]::[Unit#haltConstruction haltConstruction], [Unit]::[Unit#isConstructing isConstructing].

=== isBeingGathered ===
bool isBeingGathered() const;

Returns true if the unit is a mineral patch or refinery that is being gathered.

=== isBeingHealed ===
bool isBeingHealed() const;

Returns true if the unit is currently being healed by a Terran Medic.

=== isBlind ===
bool isBlind() const;

Returns true if the unit is currently blind from a Medic's Optical Flare.

=== isBraking ===
bool isBraking() const;

Returns true if the unit is currently braking/slowing down.

=== isBurrowed ===
bool isBurrowed() const;

Returns true if the unit is a Zerg unit that is current burrowed.

See also: [Unit]::[Unit#burrow burrow], [Unit]::[Unit#unburrow unburrow].

=== isCarryingGas ===
bool isCarryingGas() const;

Returns true if the unit is a worker that is carrying gas.

See also: [Unit]::[Unit#returnCargo returnCargo], [Unit]::[Unit#isGatheringGas isGatheringGas].

=== isCarryingMinerals ===
bool isCarryingMinerals() const;

Returns true if the unit is a worker that is carrying minerals.

See also: [Unit]::[Unit#returnCargo returnCargo], [Unit]::[Unit#isGatheringMinerals isGatheringMinerals].

=== isCloaked ===
bool isCloaked() const;

Returns true if the unit is cloaked.

See also: [Unit]::[Unit#cloak cloak], [Unit]::[Unit#decloak decloak].

=== isCompleted ===
bool isCompleted() const;

Returns true if the unit has been completed.

=== isConstructing ===
bool isConstructing() const;

Returns true when a unit has been issued an order to build a structure and is moving to the build location. Also returns true for Terran SCVs while they construct a building.

See also: [Unit]::[Unit#build build], [Unit]::[Unit#cancelConstruction cancelConstruction], [Unit]::[Unit#haltConstruction haltConstruction], [Unit]::[Unit#isBeingConstructed isBeingConstructed].

=== isDefenseMatrixed ===
bool isDefenseMatrixed() const;

Returns true if the unit has a defense matrix from a Terran Science Vessel.

=== isDetected ===
bool isDetected() const;

Returns true if the unit is visible and detected. If this is false and [Unit#isVisible Unit::isVisible] returns true, then the unit is only partially visible, and requires detection (such as from a science vessel or overlord) to become fully visible and selectable/targetable.

=== isEnsnared ===
bool isEnsnared() const;

Returns true if the unit has been ensnared by a Zerg Queen.

=== isFollowing ===
bool isFollowing() const;

Returns true if the unit is following another unit.

See also: [Unit]::[Unit#follow follow], [Unit]::[Unit#getTarget getTarget].

=== isGatheringGas ===
bool isGatheringGas() const;

Returns true if the unit is in one of the four states for gathering gas (MoveToGas, WaitForGas, HarvestGas, ReturnGas).

See also: [Unit]::[#isCarryingGas isCarryingGas].

=== isGatheringMinerals ===
bool isGatheringMinerals() const;

Returns true if the unit is in one of the four states for gathering minerals (MoveToMinerals, WaitForMinerals, MiningMinerals, ReturnMinerals).

See also: [Unit]::[#isCarryingMinerals isCarryingMinerals].

=== isHallucination ===
bool isHallucination() const;

Returns true for hallucinated units, false for normal units. Returns true for hallucinated enemy units only if Complete Map Information is enabled.

See also: [Unit]::[Unit#getRemoveTimer getRemoveTimer].

=== isHoldingPosition ===
bool isHoldingPosition() const;

Returns true for units that are holding position.

See also: [Unit]::[Unit#holdPosition holdPosition].


=== isIdle ===
bool isIdle() const;

Returns true if the unit is not doing anything.

See also: [Unit]::[Unit#stop stop].

=== isIrradiated ===
bool isIrradiated() const;

Returns true if the unit is being irradiated by a Terran Science Vessel.

See also: [Unit]::[Unit#getIrradiateTimer getIrradiateTimer].

=== isLifted ===
bool isLifted() const;

Returns true if the unit is a Terran building that is currently lifted off the ground.

See also: [Unit]::[Unit#lift lift],[Unit]::[Unit#land land].

=== isLoaded ===
bool isLoaded() const;

Return true if the unit is loaded into a Terran Bunker, Terran Dropship, Protoss Shuttle, or Zerg Overlord.

See also: [Unit]::[Unit#load load], [Unit]::[Unit#unload unload], [Unit]::[Unit#unloadAll unloadAll].

=== isLockedDown ===
bool isLockedDown() const;

Returns true if the unit is locked down by a Terran Ghost.

See also: [Unit]::[Unit#getLockdownTimer getLockdownTimer].

=== isMaelstrommed ===
bool isMaelstrommed() const;

Returns true if the unit is being maelstrommed.

See also: [Unit]::[Unit#getMaelstromTimer getMaelstromTimer].

=== isMorphing ===
bool isMorphing() const;

Returns true if the unit is a zerg unit that is morphing.

See also: [Unit]::[Unit#morph morph], [Unit]::[Unit#cancelMorph cancelMorph], [Unit]::[Unit#getBuildType getBuildType], [Unit]::[Unit#getRemainingBuildTime getRemainingBuildTime].

=== isMoving ===
bool isMoving() const;

Returns true if the unit is moving.

See also: [Unit]::[Unit#attackMove attackMove], [Unit]::[Unit#stop stop].

=== isParasited ===
bool isParasited() const;

Returns true if the unit has been parasited by some other player.

=== isPatrolling ===
bool isPatrolling() const;

Returns true if the unit is patrolling between two positions.

See also: [Unit]::[Unit#patrol patrol].

=== isPlagued ===
bool isPlagued() const;

Returns true if the unit has been plagued by a Zerg Defiler.

See also: [Unit]::[Unit#getPlagueTimer getPlagueTimer].

=== isRepairing ===
bool isRepairing() const;

Returns true if the unit is a Terran SCV that is repairing or moving to repair another unit.

=== isResearching ===
bool isResearching() const;

Returns true if the unit is a building that is researching tech. See [TechTypes] for the complete list of available techs in Broodwar.

See also: [Unit]::[Unit#research research], [Unit]::[Unit#cancelResearch cancelResearch], [Unit]::[Unit#getTech getTech], [Unit]::[Unit#getRemainingResearchTime getRemainingResearchTime].

=== isSelected ===
bool isSelected() const;

Returns true if the unit has been selected by the user via the starcraft GUI. Only available if you enable [Misc#Flag Flag]::UserInput during [AIModule]::[AIModule#onStart onStart].

See also: [Game]::[Game#getSelectedUnits getSelectedUnits].

=== isSieged ===
bool isSieged() const;

Returns true if the unit is a Terran Siege Tank that is currently in Siege mode.

See also: [Unit]::[Unit#siege siege], [Unit]::[Unit#unsiege unsiege].

=== isStartingAttack ===
bool isStartingAttack() const;

Returns true if the unit is starting to attack.

See also: [Unit]::[Unit#attackUnit attackUnit], [Unit]::[Unit#getGroundWeaponCooldown getGroundWeaponCooldown], [Unit]::[Unit#getAirWeaponCooldown getAirWeaponCooldown].

=== isStasised ===
bool isStasised() const;

Returns true if the unit has been stasised by a Protoss Arbiter.

See also: [Unit]::[Unit#getStasisTimer getStasisTimer].

=== isStimmed ===
bool isStimmed() const;

Returns true if the unit is currently stimmed.

See also: [Unit]::[Unit#getStimTimer getStimTimer].

=== isTraining ===
bool isTraining() const;

Returns true if the unit is training units (i.e. a Barracks training Marines).

See also: [Unit]::[Unit#train train], [Unit]::[Unit#getTrainingQueue getTrainingQueue], [Unit]::[Unit#cancelTrain cancelTrain], [Unit]::[Unit#getRemainingTrainTime getRemainingTrainTime].

=== isUnderStorm ===
bool isUnderStorm() const;

Returns true if the unit is under a Protoss Psionic Storm.

=== isUnpowered ===
bool isUnpowered() const;

Returns true if the unit is a Protoss building that is unpowered because no pylons are in range.

=== isUpgrading ===
bool isUpgrading() const;

Returns true if the unit is a building that is upgrading. See [UpgradeTypes] for the complete list of available upgrades in Broodwar.

See also: [Unit]::[Unit#upgrade upgrade], [Unit]::[Unit#cancelUpgrade cancelUpgrade], [Unit]::[Unit#getUpgrade getUpgrade], [Unit]::[Unit#getRemainingUpgradeTime getRemainingUpgradeTime].

=== isVisible ===
bool isVisible() const;

bool isVisible(Player{{{*}}} player) const;

Returns true if the unit is visible. If the CompleteMapInformation cheat flag is enabled, existing units hidden by the fog of war will be accessible, but isVisible will still return false.

If a player is specified, this will return true if the unit is visible to the given player. This version of the function is only available in replays or if the CompleteMapInformation cheat flag is enabled.

See also: [Unit]::[Unit#exists exists].

=== issueCommand ===
bool issueCommand([UnitCommand] command);

Calls the corresponding unit member function with the data provided in the [UnitCommand] object. For example Unit::issueCommand(UnitCommand(UnitCommandType::Attack_Position,NULL,50,60,0))

will call Unit::attackMove(Position(50,60)).

=== attackMove ===
bool attackMove([Misc#Position Position] target);

Orders the unit to attack move to the specified location. After issuing, the unit's order will become Orders::AttackMove.

=== attackUnit ===
bool attackUnit([Unit]{{{*}}} target);

Orders the unit to attack the specified unit. After issuing, the unit's order will become Orders::AttackUnit.

=== build ===
bool build([Misc#TilePosition TilePosition] target, [UnitType] type);

Orders the unit to build the given unit type at the given position. Note that if the player does not have enough resources when the unit attempts to place the building down, the order will fail. The tile position specifies where the top left corner of the building will be placed. After issuing the unit's order will become Orders::PlaceBuilding.

See also: [Unit#haltConstruction haltConstruction], [Unit#cancelConstruction Unit::cancelConstruction], [Unit#isConstructing Unit::isConstructing], [Unit#isBeingConstructed Unit::isBeingConstructed], [Unit#getBuildType Unit::getBuiltType], [Unit#getBuildUnit Unit::getBuildUnit], [Unit#getRemainingBuildTime Unit::getRemainingBuildTime].

=== buildAddon ===
bool buildAddon( [UnitType] type);

Orders the unit to build the given add-on. The unit must be a Terran building that can have an add-on and the specified unit type must be an add-on unit type. The build() command can also be used to build add-ons.

See also: [Unit#cancelAddon Unit::cancelAddon], [Unit#isConstructing Unit::isConstructing], [Unit#getBuildType Unit::getBuiltType], [Unit#getBuildUnit Unit::getBuildUnit], [Unit#getRemainingBuildTime Unit::getRemainingBuildTime].

=== train ===
bool train([UnitType] type);

Orders this unit to add the specified unit type to the training queue. Note that the player must have sufficient resources to train. If you wish to make units from a hatchery, use [getLarva] to get the larva associated with the hatchery and then call [morph] on the larva you want to morph. This command can also be used to make interceptors and scarabs.

See also: [Unit#cancelTrain Unit::cancelTrain], [Unit#cancelTrain Unit::cancelTrain(slot)], [Unit#isTraining Unit::isTraining], [Unit#getTrainingQueue Unit::getTrainingQueue], [Unit#getRemainingTrainTime Unit::getRemainingTrainTime].

=== morph ===
bool morph([UnitType] type);

Orders the unit to morph into the specified unit type. Returns false if given a wrong type.

See also: [Unit#cancelMorph Unit::cancelMorph], [Unit#isMorphing Unit::isMorphing], [Unit#getBuildType Unit::getBuildType], [Unit#getRemainingBuildTime Unit::getRemainingBuildTime].

=== research ===
bool research([TechType] tech);

Orders the unit to research the given tech type.

See also: [Unit#cancelResearch Unit::cancelResearch], [Unit#isResearching Unit::isResearching], [Unit#getTech Unit::getTech], [Unit#getRemainingResearchTime Unit::getRemainingResearchTime].

=== upgrade ===
bool upgrade(UpgradeType upgrade);

Orders the unit to upgrade the given upgrade type.

See also: [Unit#cancelUpgrade Unit::cancelUpgrade], [Unit#isUpgrading Unit::isUpgrading], [Unit#getUpgrade Unit::getUpgrade], [Unit#getRemainingUpgradeTime Unit::getRemainingUpgradeTime].

=== setRallyPosition ===
bool setRallyPosition([Misc#Position Position] target);

Orders the unit to set its rally position to the specified position.

See also: [Unit#setRallyUnit Unit::setRallyUnit], [Unit#getRallyPosition Unit::getRallyPosition], [Unit#getRallyUnit Unit::getRallyUnit].

=== setRallyUnit ===
bool setRallyUnit([Unit] target);

Orders the unit to set its rally unit to the specified unit.

See also: [Unit#setRallyPosition Unit::setRallyPosition], [Unit#getRallyPosition Unit::getRallyPosition], [Unit#getRallyUnit Unit::getRallyUnit].

=== move ===
bool move([Misc#Position Position] target);

Orders the unit to move to the specified position. After issuing, the unit's order will become Orders::Move.

See also: [Unit#isMoving Unit::isMoving].

=== patrol ===
bool patrol([Misc#Position Position] target);

Orders the unit to patrol between its current position and the specified position. After issuing, the unit's order will become Orders::Patrol.

See also: [Unit#isPatrolling Unit::isPatrolling].

=== holdPosition ===
bool holdPosition();

Orders the unit to hold its position. Note: Reavers and Carriers can only hold position if they have at least one Scarab or Interceptor. After issuing, the unit's order will become Orders::HoldPosition.

See also: [Unit#isHoldingPosition Unit::isHoldingPosition].

=== stop ===
bool stop(); 

Orders the unit to stop. After issuing, the unit's order will become Orders::Stop.

See also: [Unit]::[Unit#isMoving isMoving], [Unit]::[Unit#isBraking isBraking].

=== follow ===
bool follow([Unit] target);

Orders the unit to follow the specified unit. After issuing, the unit's order will become Orders::Follow.

See also: [Unit]::[Unit#isFollowing isFollowing].

=== gather ===
bool gather([Unit]{{{*}}} target);

Orders the unit to gather the specified unit. Only workers can be ordered to gather, and the target must be a mineral patch, Refinery, Assimilator, or Extractor.

See also: [Unit#isGatheringGas Unit::isGatheringGas], [Unit#isGatheringMinerals Unit::isGatheringMinerals].

=== returnCargo ===
bool returnCargo();

Orders the unit to return its cargo to a nearby resource depot such as a Command Center. Only workers that are carrying minerals or gas can be ordered to return cargo.

See also: [Unit#isCarryingGas Unit::isCarryingGas], [Unit#isCarryingMinerals isCarryingMinerals], [Unit#isGatheringGas Unit::isGatheringGas], [Unit#isGatheringMinerals Unit::isGatheringMinerals].

=== repair ===
bool repair([Unit]{{{*}}} target);

Orders the unit to repair the specified unit. Only Terran SCVs can be ordered to repair, and the target must be a mechanical Terran unit or building. After issuing, the unit's order will become Orders::Repair.

See also: [Unit#isRepairing Unit::isRepairing].

=== burrow ===
bool burrow();

Orders the unit to burrow. Either the unit must be a Zerg Lurker, or the unit must be a Zerg ground unit and burrow tech must be researched. After issuing, the unit's order will become Orders::Burrowing while the unit transitions.

See also: [Unit#unburrow Unit::unburrow], [Unit#isBurrowed Unit::isBurrowed].

=== unburrow ===
bool unburrow();

Orders the burrowed unit to unburrow. After issuing, the unit's order will become Orders::Unburrowing while the unit transitions.

See also: [Unit#burrow Unit::burrow], [Unit#isBurrowed Unit::isBurrowed].

=== cloak ===
bool cloak();

Orders the unit to cloak.

See also: [Unit#decloak Unit::decloak], [Unit#isCloaked Unit::isCloaked].

=== decloak ===
bool decloak();

Orders the unit to decloak.

See also: [Unit#cloak Unit::cloak], [Unit#isCloaked Unit::isCloaked].

=== siege ===
bool siege();

Orders the unit to siege. Note: unit must be a Terran siege tank. After issuing, the unit's order will become Orders::Sieging while the siege tank transitions.

See also: [Unit#unsiege Unit::unsiege], [Unit#isSieged Unit::isSieged].

=== unsiege ===
bool unsiege();

Orders the unit to unsiege. Note: unit must be a Terran siege tank. After issuing, the unit's order will become Orders::Unsieging while the siege tank transitions.

See also: [Unit#siege Unit::siege], [Unit#isSieged Unit::isSieged].

=== lift ===
bool lift();

Orders the unit to lift. Note: unit must be a Terran building that can be lifted.

See also: [Unit#land Unit::land], [Unit#isLifted Unit::isLifted].

=== land ===
bool land([Misc#TilePosition TilePosition] target);

Orders the unit to land. Note: unit must be a Terran building that is currently lifted.

See also: [Unit#lift Unit::lift], [Unit#isLifted Unit::isLifted].

=== load ===
bool load([Unit]{{{*}}} target);

Orders the unit to load the target unit.

See also: [Unit]::[Unit#unload unload], [Unit]::[Unit#unloadAll unloadAll], [Unit]::[Unit#getLoadedUnits getLoadedUnits], [Unit]:[Unit#isLoaded isLoaded].

=== unload ===
bool unload([Unit]{{{*}}} target);

Orders the unit to unload the target unit.

See also: [Unit]::[Unit#load load], [Unit]::[Unit#unloadAll unloadAll], [Unit]::[Unit#getLoadedUnits getLoadedUnits], [Unit]:[Unit#isLoaded isLoaded].

=== unloadAll ===
bool unloadAll();

Orders the unit to unload all loaded units at the unit's current position.

See also: [Unit]::[Unit#load load], [Unit]::[Unit#unload unload], [Unit]::[Unit#unloadAll unloadAll], [Unit]::[Unit#getLoadedUnits getLoadedUnits], [Unit]:[Unit#isLoaded isLoaded].

=== unloadAll ===
bool unloadAll([Misc#Position Position] target);

Orders the unit to unload all loaded units at the specified location. Unit should be a Terran Dropship, Protoss Shuttle, or Zerg Overlord. If the unit is a Terran Bunker, the units will be unloaded right outside the bunker, like in the first version of unloadAll.

See also: [Unit]::[Unit#load load], [Unit]::[Unit#unload unload], [Unit]::[Unit#unloadAll unloadAll], [Unit]::[Unit#getLoadedUnits getLoadedUnits], [Unit]:[Unit#isLoaded isLoaded].

=== rightClick ===
bool rightClick([Misc#Position Position] target);

Works like the right click in the GUI.

=== rightClick ===
bool rightClick([Unit]{{{*}}} target);

Works like the right click in the GUI. Right click on a mineral patch to order a worker to mine, right click on an enemy to attack it.

=== haltConstruction ===
bool haltConstruction();

Orders the SCV to stop constructing the building, and the building is left in a partially complete state until it is canceled, destroyed, or completed.

See also: [Unit]::[Unit#build Unit::build], [Unit]::[Unit#cancelConstruction Unit::cancelConstruction], [Unit#isConstructing Unit::isConstructing].

=== cancelConstruction ===
bool cancelConstruction();

Orders the building to stop being constructed.

See also: [Unit#build Unit::build], [Unit#beingConstructed Unit::beingConstructed].

=== cancelAddon ===
bool cancelAddon();

Orders the unit to stop making the addon.

See also: [Unit#buildAddon Unit::buildAddon].

=== cancelTrain ===
bool cancelTrain();

Orders the unit to remove the last unit from its training queue.

See also: [Unit#train Unit::train], [Unit#cancelTrain Unit::cancelTrain(Slot)], [Unit#isTraining Unit::isTraining], [Unit#getTrainingQueue Unit::getTrainingQueue].

=== cancelTrain ===
bool cancelTrain(int slot);

Orders the unit to remove the specified unit from its training queue.

See also: [Unit#train Unit::train], [Unit#cancelTrain Unit::cancelTrain], [Unit#isTraining Unit::isTraining], [Unit#getTrainingQueue Unit::getTrainingQueue].

=== cancelMorph ===
bool cancelMorph();

Orders the unit to stop morphing.

See also: [Unit#morph Unit::morph], [Unit#isMorphing Unit::isMorphing].

=== cancelResearch ===
bool cancelResearch();

Orders the unit to cancel a research in progress.

See also: [Unit#research Unit::research], [Unit#isResearching Unit::isResearching], [Unit#getTech Unit::getTech].

=== cancelUpgrade ===
bool cancelUpgrade();

Orders the unit to cancel an upgrade in progress.

See also: [Unit#upgrade Unit::upgrade], [Unit#isUpgrading Unit::isUpgrading], [Unit#getUpgrade Unit::getUpgrade].

=== useTech ===
bool useTech([TechType] tech);

Orders the unit to use a tech not requiring a target (i.e. Stim Pack).
Returns true if it is a valid tech.

=== useTech ===
bool useTech([TechType] tech, Position position);

Orders the unit to use a tech requiring a position target (i.e. Dark Swarm).
Returns true if it is a valid tech.

=== useTech ===
bool useTech([TechType] tech, Unit{{{*}}} target);

Orders the unit to use a tech requiring a unit target (i.e. Irradiate).
Returns true if it is a valid tech.