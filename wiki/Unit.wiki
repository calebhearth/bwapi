#sidebar TableOfContents
The Unit class is used to get information about individual units as well as issue orders to units.

Methods:

  * [#getOwner getOwner]
  * [#getType getType]
  * [#health health]
  * [#shield shield]
  * [#energy energy]
  * [#getPosition getPosition]
  * [#getTilePosition getTilePosition]

  * [#getTarget getTarget]
  * [#getTargetPosition getTargetPosition]
  * [#getOrder getOrder]
  * [#getOrderTarget getOrderTarget]
  * [#getOrderTimer getOrderTimer]
  * [#getSecondaryOrder getSecondaryOrder]
  * [#getBuildUnit getBuildUnit]
  * [#getRemainingBuildTime getRemainingBuildTime]
  * [#getChild getChild]

  * [#isLoaded isLoaded]
  * [#isVisible isVisible]
  * [#isSelected isSelected]
  * [#isCompleted isCompleted]
  * [#isLifted isLifted]
  * [#isBurrowed isBurrowed]
  * [#isIdle isIdle]
  * [#isCloaked isCloaked]
  * [#isDisabled isDisabled]
  * [#isTraining isTraining]
  * [#getTrainingQueue getTrainingQueue]

The following orders can be issued to units:
  * [#attackMove attackMove] - Attack move to a posiion
  * [#rightClick rightClick] - Right click on a position
  * [#rightClick rightClick] - Right click on a unit
  * [#train train]
  * [#build build]
  * [#invent invent]
  * [#upgrade upgrade]

The following orders have not been implemented yet:
  * [#stop stop]
  * [#holdPosition holdPosition]
  * [#patrol patrol]
  * [#useTech useTech]
  * [#useTech_2 useTech]
  * [#useTech_3 useTech]

Possible methods we could add:
  * [#getLoadedUnits getLoadedUnits]

=== getOwner ===
[Player]{{{*}}} getOwner();

=== getType ===
[UnitType] getType();

=== health ===
int health();

=== shield ===
int shield();

=== energy ===
int energy();

=== getPosition ===
[Misc#Position Position] getPosition();

Returns the position of the unit on the map.
=== getTilePosition ===
[Misc#TilePosition TilePosition] getTilePosition();

Returns the build tile position of the unit on the map. Useful if the unit is a building.

=== getTarget ===
[Unit]{{{*}}} getTarget();

=== getTargetPosition ===
[Misc#Position Position] getTargetPosition();

=== getOrder ===
[Order] getOrder();

=== getOrderTarget ===
[Unit]{{{*}}} getOrderTarget();

=== getOrderTimer ===
int getOrderTimer();

=== getSecondaryOrder ===
[Order] getSecondaryOrder();

=== getBuildUnit ===
[Unit]{{{*}}} getBuildUnit();

=== getRemainingBuildTime ===
int getRemainingBuildTime();

Returns the remaining build time of a unit/building that is being constructed.

=== getChild ===
[Unit]{{{*}}} getChild();

=== isLoaded ===
bool isLoaded();

Not implemented yet. Will return true if the unit is loaded into another unit (like a drop ship).

=== isVisible ===
bool isVisible();

Returns true if the unit is visible. Incomplete: only based on heuristics right now.

=== isSelected ===
bool isSelected();

Returns true if the unit has been selected by the user via the starcraft GUI. Only available if you enable [Misc#Flag Flag]::UserInput during [AIModule]::[AIModule#onStart onStart].

=== isCompleted ===
bool isCompleted();

=== isLifted ===
bool isLifted();

Returns true if the unit is a Terran building that is currently lifted off the ground.

=== isBurrowed ===
bool isBurrowed();

Returns true if the unit is a Zerg unit that is current burrowed.

=== isIdle ===
bool isIdle();

Returns true if the unit is not doing anything.

=== isCloaked ===
bool isCloaked();

Returns true if the unit is cloaked. (Does this work as expected for units that have cloaking for free, like Dark Templars?)

=== isDisabled ===
bool isDisabled();


=== isTraining ===
bool isTraining();

Returns true if the unit is training units (i.e. a Barracks training Marines). For the list of units in the queue, see [Unit]::[#getTrainingQueue getTrainingQueue].

=== getTrainingQueue ===
std::list< UnitType > getTrainingQueue();

Returns the list of units queued up to be trained.

=== attackMove ===
void attackMove([Misc#Position Position] target);

=== rightClick ===
void rightClick([Misc#Position Position]target);

=== rightClick ===
void rightClick([Unit]{{{*}}} target);

=== train ===
void train([UnitType] type);

=== build ===
void build([Misc#TilePosition TilePosition] p, [UnitType] type);

Orders the unit to build the given unit type at the given position.

=== invent ===
void invent([TechType] tech);

Orders the unit to research the given tech type.

=== upgrade ===
void upgrade(UpgradeType upgrade);

Orders the unit to upgrade teh given upgrade type.

=== stop ===
int stop(); 

Not implemented yet.

=== holdPosition ===
void holdPosition();

Not implemented yet.

=== patrol ===
void patrol([Misc#Position Position] target);

Not implemented yet.

=== useTech ===
void useTech(Tech tech);

Not implemented yet.

=== useTech_2 ===
void useTech(Tech tech, Position position);

Not implemented yet.

=== useTech_3 ===
void useTech(Tech tech, Unit{{{*}}} target);

Not implemented yet.

=== getLoadedUnits ===
std::list<Unit{{{*}}}> getLoadedUnits();

Would return the list of units loaded, such as in a dropship.