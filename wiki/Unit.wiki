#sidebar TableOfContents

Class header file: [http://code.google.com/p/bwapi/source/browse/trunk/bwapi/include/BWAPI/Unit.h# BWAPI/Unit.h]

The Unit class is used to get information about individual units as well as issue orders to units.

Methods:

  * [#getPlayer getPlayer]
  * [#getType getType]
  * [#getHitPoints getHitPoints]
  * [#getShields getShields]
  * [#getEnergy getEnergy]
  * [#getResources getResources]
  * [#getKillCount getKillCount]
  * [#getGroundWeaponCooldown getGroundWeaponCooldown]
  * [#getAirWeaponCooldown getAirWeaponCooldown]
  * [#getSpellCooldown getSpellCooldown]
  * [#getDefenseMatrixPoints getDefenseMatrixPoints]
  * [#getDefenseMatrixTimer getDefenseMatrixTimer]
  * [#getStimTimer getStimTimer]
  * [#getEnsnareTimer getEnsnareTimer]
  * [#getLockdownTimer getLockdownTimer]
  * [#getIrradiateTimer getIrradiateTimer]
  * [#getStasisTimer getStasisTimer]
  * [#getPlagueTimer getPlagueTimer]
  * [#getMaelstromTimer getMaelstromTimer]
  * [#getRemoveTimer getRemoveTimer]
  * [#getPosition getPosition]
  * [#getTilePosition getTilePosition]
  * [#getDistance getDistance]
  * [#getDistance_2 getDistance]
  * [#getCurrentDirection getCurrentDirection]

  * [#getTarget getTarget]
  * [#getTargetPosition getTargetPosition]
  * [#getOrder getOrder]
  * [#getOrderTarget getOrderTarget]
  * [#getOrderTimer getOrderTimer]
  * [#getSecondaryOrder getSecondaryOrder]
  * [#getBuildUnit getBuildUnit]
  * [#getRemainingBuildTime getRemainingBuildTime]
  * [#getRemainingTrainTime getRemainingTrainTime]
  * [#getChild getChild]
  * [#getTrainingQueue getTrainingQueue]
  * [#getTransport getTransport]
  * [#getLoadedUnits getLoadedUnits]
  * [#getInterceptorCount getInterceptorCount]
  * [#getScarabCount getScarabCount]
  * [#getSpiderMineCount getSpiderMineCount]
  * [#getTech getTech]
  * [#getUpgrade getUpgrade]
  * [#getRemainingResearchTime getRemainingResearchTime]
  * [#getRemainingUpgradeTime getRemainingUpgradeTime]
  * [#getRallyPosition getRallyPosition]
  * [#getRallyUnit getRallyUnit]
  * [#getAddon getAddon]

  * [#exists exists]
  * [#isAccelerating isAccelerating]
  * [#isBeingConstructed isBeingConstructed]
  * [#isBeingHealed isBeingHealed]
  * [#isBlind isBlind]
  * [#isBraking isBraking]
  * [#isBurrowed isBurrowed]
  * [#isCloaked isCloaked]
  * [#isCompleted isCompleted]
  * [#isConstructing isConstructing]
  * [#isFollowing isFollowing]
  * [#isGatheringGas isGatheringGas]
  * [#isGatheringMinerals isGatheringMinerals]
  * [#isHallucination isHallucination]
  * [#isIdle isIdle]
  * [#isLifted isLifted]
  * [#isLoaded isLoaded]
  * [#isLockedDown isLockedDown]
  * [#isMorphing isMorphing]
  * [#isMoving isMoving]
  * [#isPatrolling isPatrolling]
  * [#isRepairing isRepairing]
  * [#isResearching isResearching]
  * [#isSelected isSelected]
  * [#isSieged isSieged]
  * [#isStartingAttack isStartingAttack]
  * [#isStasised isStasised]
  * [#isTraining isTraining]
  * [#isUnderStorm isUnderStorm]
  * [#isUnpowered isUnpowered]
  * [#isUpgrading isUpgrading]
  * [#isVisible isVisible]

The following orders can be issued to units:

  * [#attackMove attackMove] - Attack move to a position
  * [#attackUnit attackUnit] - Attack a specific unit
  * [#rightClick rightClick] - Right click on a position
  * [#rightClick_2 rightClick] - Right click on a unit
  * [#train train]
  * [#build build]
  * [#buildAddon buildAddon]
  * [#invent research]
  * [#upgrade upgrade]
  * [#stop stop]
  * [#holdPosition holdPosition]
  * [#patrol patrol]
  * [#follow follow]
  * [#setRallyPosition setRallyPosition]
  * [#setRallyUnit setRallyUnit]
  * [#repair repair]
  * [#morph morph]
  * [#burrow burrow]
  * [#unburrow unburrow]
  * [#siege siege]
  * [#unsiege unsiege]
  * [#cloak cloak]
  * [#decloak decloak]
  * [#lift lift]
  * [#land land]
  * [#load load]
  * [#unload unload]
  * [#unloadAll unloadAll]
  * [#unloadAll_2 unloadAll]
  * [#cancelConstruction cancelConstruction]
  * [#haltConstruction haltConstruction]
  * [#cancelMorph cancelMorph]
  * [#cancelTrain cancelTrain] - cancel the last unit in the queue
  * [#cancelTrain_2 cancelTrain] - cancel the unit at a specific index in the queue
  * [#cancelAddon cancelAddon]
  * [#cancelResearch cancelResearch]
  * [#cancelUpgrade cancelUpgrade]
  * [#useTech useTech]
  * [#useTech_2 useTech]
  * [#useTech_3 useTech]

=== getPlayer ===
[Player]{{{*}}} getPlayer() const;

Returns a pointer to the player that owns this unit.

=== getType ===
[UnitType] getType() const;

Returns the type of the unit.

=== getHitPoints ===
int getHitPoints() const;

Returns the unit's current amount of hit points.

=== getShields ===
int getShields() const;

Returns the unit's current amount of shields.

=== getEnergy ===
int getEnergy() const;

Returns the unit's current amount of energy.

=== getResources ===
int getResources() const;

Returns the unit's current amount of containing resources. Useful for determining how much minerals are left in a mineral patch, or how much gas is left in a geyser (can also be called on a refinery/assimilator/extractor).

=== getKillCount ===
int getKillCount() const;

Returns the unit's current kill count.

=== getGroundWeaponCooldown ===
int getGroundWeaponCooldown() const;

Returns unit's ground weapon cooldown. It is 0 if the unit is ready to attack.

=== getAirWeaponCooldown ===
int getAirWeaponCooldown() const;

Returns unit's air weapon cooldown. It is 0 if the unit is ready to attack.

=== getSpellCooldown ===
int getSpellCooldown() const;

Returns unit's ground weapon cooldown. It is 0 if the unit is ready cast a spell.

=== getDefenseMatrixPoints ===
int getDefenseMatrixPoints() const;

Returns the remaining hitpoints of the defense matrix. 
Initially a defense Matrix has 64000(250 ingame) points. Note that you have to divide it by
256 to get the hitpoint format the game displays.

=== getDefenseMatrixTimer ===
int getDefenseMatrixTimer() const;

Returns the time until the defense matrix wears off. 0 -> No defense Matrix present.

=== getStimTimer ===
int getStimTimer() const;

Returns the time until the stimpack wears off. 0 -> No stimpack boost present.

=== getEnsnareTimer ===
int getEnsnareTimer() const;

Returns the time until the ensnare effect wears off. 0 -> No ensnare effect present.

=== getLockdownTimer ===
int getLockdownTimer() const;

Returns the time until the lockdown wears off. 0 -> No lockdown present.

=== getIrradiateTimer ===
int getIrradiateTimer() const;

Returns the time until the radiation wears off. 0 -> No radiation present.

=== getStasisTimer ===
int getStasisTimer() const;

Returns the time until the stasis field wears off. 0 -> No stasis field present.

=== getPlagueTimer ===
int getPlagueTimer() const;

Returns the time until the plague wears off. 0 -> No plague present.

=== getMaelstromTimer ===
int getMaelstromTimer() const;

Returns the time until the maelstrom wears off. 0 -> No maelstrom present.

=== getRemoveTimer ===
int getRemoveTimer() const;

Returns the amount of time until the unit is removed, or 0 if the unit does not have a remove timer. Used to determine how much time remains before hallucinated units, dark swarm, etc have until they are removed.

=== getPosition ===
[Misc#Position Position] getPosition() const;

Returns the position of the unit on the map.
=== getTilePosition ===
[Misc#TilePosition TilePosition] getTilePosition() const;

Returns the build tile position of the unit on the map. Useful if the unit is a building.

=== getDistance ===
double getDistance([Unit]{{{*}}} target) const;

Returns the edge-to-edge distance between the current unit and the target unit.

=== getDistance_2 ===
double getDistance([Misc#Position Position] target) const;

Returns the distance from the edge of the current unit to the target position.

=== getCurrentDirection ===
int getCurrentDirection() const;

Returns the direction the unit is facing. Range 0-255.
North: 0, East: 64, South: 128, West: 192

=== getTarget ===
[Unit]{{{*}}} getTarget() const;

=== getTargetPosition ===
[Misc#Position Position] getTargetPosition() const;

=== getOrder ===
[Order] getOrder() const;

=== getOrderTarget ===
[Unit]{{{*}}} getOrderTarget() const;

=== getOrderTimer ===
int getOrderTimer() const;

=== getSecondaryOrder ===
[Order] getSecondaryOrder() const;

=== getBuildUnit ===
[Unit]{{{*}}} getBuildUnit() const;

If the unit is an SCV that is constructing a building, this will return the building it is constructing. If the unit is a Terran building that is being constructed, this will return the SCV that is constructing it.

=== getRemainingBuildTime ===
int getRemainingBuildTime() const;

Returns the remaining build time of a unit/building that is being constructed.

=== getRemainingTrainTime ===
int getRemainingTrainTime() const;

Returns the remaining time of the unit that is currently being trained.


=== getChild ===
[Unit]{{{*}}} getChild() const;

=== getTrainingQueue ===
std::list< [UnitType] > getTrainingQueue() const;

Returns the list of units queued up to be trained.

See also: [Unit]::[Unit#train train], [Unit]::[Unit#cancelTrain cancelTrain], [Unit]::[Unit#cancelTrain_2 cancelTrain], [Unit]::[Unit#isTraining isTraining].

=== getTransport ===
[Unit]{{{*}}} getTransport() const;

Returns the dropship, shuttle, overlord, or bunker that is this unit is loaded in to.

=== getLoadedUnits ===
std::list<[Unit]{{{*}}}> getLoadedUnits() const;

Returns a list of the units loaded into a Terran Bunker, Terran Dropship, Protoss Shuttle, or Zerg Overlord.

=== getInterceptorCount ===
int getInterceptorCount() const;

Returns the number of interceptors the Protoss Carrier has.

=== getScarabCount ===
int getScarabCount() const;

Returns the number of scarabs in the Protoss Reaver.

=== getSpiderMineCount ===
int getSpiderMineCount() const;

Returns the number of spider mine in the Terran Vulture.

=== getTech ===
[TechType] getTech() const;

Returns the tech that the unit is currently researching. If the unit is not researching anything, [TechTypes]::None is returned.

See also: [Unit]::[Unit#research research], [Unit]::[Unit#cancelResearch cancelResearch], [Unit]::[Unit#isResearching isResearching], [Unit]::[Unit#getRemainingResearchTime getRemainingResearchTime].

=== getUpgrade ===
[UpgradeType] getUpgrade() const;

Returns the upgrade that the unit is currently upgrading. If the unit is not upgrading anything, [UpgradeTypes]::None is returned.

See also: [Unit]::[Unit#upgrade upgrade], [Unit]::[Unit#cancelUpgrade cancelUpgrade], [Unit]::[Unit#isUpgrading isUpgrading], [Unit]::[Unit#getRemainingUpgradeTime getRemainingUpgradeTime].

=== getRemainingResearchTime ===
int getRemainingResearchTime() const;

Returns the amount of time until the unit is done researching its current tech. If the unit is not researching anything, 0 is returned.

See also: [Unit]::[Unit#research research], [Unit]::[Unit#cancelResearch cancelResearch], [Unit]::[Unit#isResearching isResearching], [Unit]::[Unit#getTech getTech].

=== getRemainingUpgradeTime ===
int getRemainingUpgradeTime() const;

Returns the amount of time until the unit is done upgrading its current upgrade. If the unit is not upgrading anything, 0 is returned.

See also: [Unit]::[Unit#upgrade upgrade], [Unit]::[Unit#cancelUpgrade cancelUpgrade], [Unit]::[Unit#isUpgrading isUpgrading], [Unit]::[Unit#getUpgrade getUpgrade].

=== getRallyPosition ===
[Misc#Position Position] getRallyPosition() const;

Returns the position the building is rallied to. If the building does not produce units, Positions::None is returned.

See also: [Unit]::[Unit#setRallyPosition setRallyPosition], [Unit]::[Unit#setRallyUnit setRallyUnit], [Unit]::[Unit#getRallyUnit getRallyUnit].

=== getRallyUnit ===
[Unit]{{{*}}} getRallyUnit() const;

Returns the unit the building is rallied to. If the building is not rallied to any unit, NULL is returned.

See also: [Unit]::[Unit#setRallyPosition setRallyPosition], [Unit]::[Unit#setRallyUnit setRallyUnit], [Unit]::[Unit#getRallyPosition getRallyPosition].

=== getAddon ===
[Unit]{{{*}}} getAddon() const;

Returns the add-on of this unit, or NULL if the unit doesn't have an add-on.

=== exists ===
bool exists() const;

Returns true if the unit exists.

=== isAccelerating ===
bool isAccelerating() const;

Returns true if the unit is currently accelerating.

=== isBeingConstructed ===
bool isBeingConstructed() const;

Returns true if the unit is being constructed. Always true for incomplete Protoss and Zerg buildings, and true for incomplete Terran buildings that have an SCV constructing them. If the SCV halts construction, isBeingConstructed will return false.

See also: [Unit]::[Unit#build build], [Unit]::[Unit#cancelConstruction cancelConstruction], [Unit]::[Unit#haltConstruction haltConstruction], [Unit]::[Unit#isConstructing isConstructing].

=== isBeingHealed ===
bool isBeingHealed() const;

Returns true if the unit is currently being healed by a Terran Medic.

=== isBlind ===
bool isBlind() const;

Returns true if the unit is currently blind from a Medic's Optical Flare.

=== isBraking ===
bool isBraking() const;

Returns true if the unit is currently braking/slowing down.

=== isBurrowed ===
bool isBurrowed() const;

Returns true if the unit is a Zerg unit that is current burrowed.

See also: [Unit]::[Unit#burrow burrow], [Unit]::[Unit#unburrow unburrow].

=== isCloaked ===
bool isCloaked() const;

Returns true if the unit is cloaked.

See also: [Unit]::[Unit#cloak cloak], [Unit]::[Unit#decloak decloak].

=== isCompleted ===
bool isCompleted() const;

Returns true if the unit has been completed.

=== isConstructing ===
bool isConstructing() const;

Returns true when a unit has been issued an order to build a structure and is moving to the build location. Also returns true for Terran SCVs while they construct a building.

See also: [Unit]::[Unit#build build], [Unit]::[Unit#cancelConstruction cancelConstruction], [Unit]::[Unit#haltConstruction haltConstruction], [Unit]::[Unit#isBeingConstructed isBeingConstructed].

=== isFollowing ===
bool isFollowing() const;

Returns true if the unit is following another unit.

See also: [Unit]::[Unit#follow follow].

=== isGatheringGas ===
bool isGatheringGas() const;

Returns true if the unit is gathering gas.

=== isGatheringMinerals ===
bool isGatheringMinerals() const;

Returns true if the unit is gathering minerals.

=== isHallucination ===
bool isHallucination() const;

Returns true for hallucinated units, false for normal units.

=== isIdle ===
bool isIdle() const;

Returns true if the unit is not doing anything.

See also: [Unit]::[Unit#stop stop].

=== isLifted ===
bool isLifted() const;

Returns true if the unit is a Terran building that is currently lifted off the ground.

See also: [Unit]::[Unit#lift lift],[Unit]::[Unit#land land].

=== isLoaded ===
bool isLoaded() const;

Return true if the unit is loaded into a Terran Bunker, Terran Dropship, Protoss Shuttle, or Zerg Overlord.

See also: [Unit]::[Unit#load load], [Unit]::[Unit#unload unload], [Unit]::[Unit#unloadAll unloadAll], [Unit]::[Unit#unloadAll_2 unloadAll].

=== isLockedDown ===
bool isLockedDown() const;

Returns true if the unit is locked down by a Terran Ghost.

=== isMorphing ===
bool isMorphing() const;

Returns true if the unit is a zerg unit that is morphing.

See also: [Unit]::[Unit#morph morph], [Unit]::[Unit#cancelMorph cancelMorph].

=== isMoving ===
bool isMoving() const;

Returns true if the unit is moving.

See also: [Unit]::[Unit#attackMove attackMove], [Unit]::[Unit#stop stop].

=== isPatrolling ===
bool isPatrolling() const;

Returns true if the unit is patrolling between two positions.

See also: [Unit]::[Unit#patrol patrol].

=== isRepairing ===
bool isRepairing() const;

Returns true if the unit is a Terran SCV that is repairing or moving to repair another unit.

=== isResearching ===
bool isResearching() const;

Returns true if the unit is a building that is researching tech. See [TechTypes] for the complete list of available techs in Broodwar.

See also: [Unit]::[Unit#research research], [Unit]::[Unit#cancelResearch cancelResearch], [Unit]::[Unit#getTech getTech], [Unit]::[Unit#getRemainingResearchTime getRemainingResearchTime].

=== isSelected ===
bool isSelected() const;

Returns true if the unit has been selected by the user via the starcraft GUI. Only available if you enable [Misc#Flag Flag]::UserInput during [AIModule]::[AIModule#onStart onStart].

=== isSieged ===
bool isSieged() const;

Returns true if the unit is a Terran Siege Tank that is currently in Siege mode.

See also: [Unit]::[Unit#siege siege], [Unit]::[Unit#unsiege unsiege].

=== isStartingAttack ===
bool isStartingAttack() const;

Returns true if the unit is starting to attack.

See also: [Unit]::[Unit#attackUnit attackUnit].

=== isStasised ===
bool isStasised() const;

Returns true if the unit has been stasised by a Protoss Arbiter.

=== isTraining ===
bool isTraining() const;

Returns true if the unit is training units (i.e. a Barracks training Marines).

See also: [Unit]::[Unit#train train], [Unit]::[Unit#getTrainingQueue getTrainingQueue], [Unit]::[Unit#cancelTrain cancelTrain], [Unit]::[Unit#cancelTrain_2 cancelTrain].

=== isUnderStorm ===
bool isUnderStorm() const;

Returns true if the unit is under a Protoss Psionic Storm.

=== isUnpowered ===
bool isUnpowered() const;

Returns true if the unit is a Protoss building that is unpowered because no pylons are in range.

=== isUpgrading ===
bool isUpgrading() const;

Returns true if the unit is a building that is upgrading. See [UpgradeTypes] for the complete list of available upgrades in Broodwar.

See also: [Unit]::[Unit#upgrade upgrade], [Unit]::[Unit#cancelUpgrade cancelUpgrade], [Unit]::[Unit#getUpgrade getUpgrade], [Unit]::[Unit#getRemainingUpgradeTime getRemainingUpgradehTime].

=== isVisible ===
bool isVisible() const;

Returns true if the unit is visible.

=== attackMove ===
bool attackMove([Misc#Position Position] target);

Orders the unit to attack move to the specified location.

=== attackUnit ===
bool attackUnit([Misc#Position Position] target);

Orders the unit to attack the specified unit.

=== rightClick ===
bool rightClick([Misc#Position Position]target);

Works like the right click in the GUI.

=== rightClick_2 ===
bool rightClick([Unit]{{{*}}} target);

Works like the right click in the GUI. Right click on a mineral patch to order a worker to mine, right click on an enemy to attack it.

=== train ===
bool train([UnitType] type);

Orders this unit to a the specified unit type to the training queue. Note that the player must have sufficient resources to train.

=== build ===
bool build([Misc#TilePosition TilePosition] p, [UnitType] type);

Orders the unit to build the given unit type at the given position. Note that if the player does not have enough resources when the unit attempts to place the building down, the order will fail.

=== buildAddon ===
bool buildAddon( [UnitType] type);

Orders the unit to build the given addon. The unit must be a Terran building that can have an addon and the specified unit type must be an addon unit type.

=== research ===
bool research([TechType] tech);

Orders the unit to research the given tech type.

See also: [Unit]::[Unit#cancelResearch cancelResearch], [Unit]::[Unit#isResearching], [Unit]::[Unit#getRemainingResearchTime getRemainingResearchTime], [Unit]::[Unit#getTech getTech].

=== upgrade ===
bool upgrade(UpgradeType upgrade);

Orders the unit to upgrade the given upgrade type.

See also: [Unit]::[Unit#cancelUpgrade cancelUpgrade], [Unit]::[Unit#isUpgrading], [Unit]::[Unit#getRemainingUpgradeTime getRemainingUpgradeTime], [Unit]::[Unit#getUpgrade getUpgrade].

=== stop ===
bool stop(); 

Orders the unit to stop.

=== holdPosition ===
bool holdPosition();

Orders the unit to hold its position.

=== patrol ===
bool patrol([Misc#Position Position] target);

Orders the unit to patrol between its current position and the specified position.

See also: [Unit]::[Unit#isPatrolling isPatrolling].

=== follow ===
bool follow([Unit] target);

Orders the unit to follow the specified unit.

See also: [Unit]::[Unit#isFollowing isFollowing].

=== setRallyPosition ===
bool setRallyPosition([Misc#Position Position] target);

Orders the unit to set its rally position to the specified position.

See also: [Unit]::[Unit#setRallyUnit setRallyUnit], [Unit]::[Unit#getRallyPosition getRallyPosition], [Unit]::[Unit#getRallyUnit getRallyUnit].

=== setRallyUnit ===
bool setRallyUnit([Unit] target);

Orders the unit to set its rally unit to the specified unit.

See also: [Unit]::[Unit#setRallyPosition setRallyPosition], [Unit]::[Unit#getRallyPosition getRallyPosition], [Unit]::[Unit#getRallyUnit getRallyUnit].

=== repair ===
bool repair([Unit]{{{*}}} target);

Orders the unit to repair the specified unit. Only Terran SCVs can be ordered to repair, and the target must be a mechanical Terran unit or building.

See also: [Unit]::[Unit#isRepairing isRepairing].

=== morph ===
bool morph([UnitType] type);

Orders the unit to morph into the specified unit type. Returns false if given a wrong type.

See also: [Unit]::[Unit#cancelMorph cancelMorph], [Unit]::[Unit#isMorphing isMorphing].

=== burrow ===
bool burrow();

Orders the unit to burrow. Either the unit must be a Zerg Lurker, or the unit must be a Zerg ground unit and burrow tech must be researched.

See also: [Unit]::[Unit#unburrow unburrow], [Unit]::[Unit#isBurrowed isBurrowed].

=== unburrow ===
bool unburrow();

Orders the burrowed unit to unburrow. 

See also: [Unit]::[Unit#burrow burrow], [Unit]::[Unit#isBurrowed isBurrowed].

=== siege ===
bool siege();

Orders the unit to siege. Note: unit must be a Terran siege tank.

See also: [Unit]::[Unit#unsiege unsiege], [Unit]::[Unit#isSieged isSieged].

=== unsiege ===
bool unsiege();

Orders the unit to unsiege. Note: unit must be a Terran siege tank.

See also: [Unit]::[Unit#unsiege unsiege], [Unit]::[Unit#isSieged isSieged].

=== cloak ===
bool cloak();

Orders the unit to cloak.

See also: [Unit]::[Unit#decloak decloak], [Unit]::[Unit#isCloaked isCloaked].

=== decloak ===
bool decloak();

Orders the unit to decloak.

See also: [Unit]::[Unit#cloak cloak], [Unit]::[Unit#isCloaked isCloaked].

=== lift ===
bool lift();

Orders the unit to lift. Note: unit must be a Terran building that can be lifted.

See also: [Unit]::[Unit#land land], [Unit]::[Unit#isLifted isLifted].

=== land ===
bool land([Misc#TilePosition TilePosition] target);

Orders the unit to land. Note: unit must be a Terran building that is currently lifted.

See also: [Unit]::[Unit#lift lift], [Unit]::[Unit#isLifted isLifted].

=== load ===
bool load([Unit]{{{*}}} target);

Orders the unit to load the target unit.

See also: [Unit]::[Unit#unload unload], [Unit]::[Unit#unloadAll unloadAll], [Unit]::[Unit#unloadAll_2 unloadAll], [Unit]::[Unit#getLoadedUnits getLoadedUnits], [Unit]:[Unit#isLoaded isLoaded].

=== unload ===
bool unload([Unit]{{{*}}} target);

Orders the unit to unload the target unit.

See also: [Unit]::[Unit#load load], [Unit]::[Unit#unloadAll unloadAll], [Unit]::[Unit#unloadAll_2 unloadAll], [Unit]::[Unit#getLoadedUnits getLoadedUnits], [Unit]:[Unit#isLoaded isLoaded].

=== unloadAll ===
bool unloadAll();

Orders the unit to unload all loaded units at the unit's current position.

See also: [Unit]::[Unit#load load], [Unit]::[Unit#unload unload], [Unit]::[Unit#unloadAll_2 unloadAll], [Unit]::[Unit#getLoadedUnits getLoadedUnits], [Unit]:[Unit#isLoaded isLoaded].

=== unloadAll_2 ===
bool unloadAll([Misc#Position Position] target);

Orders the unit to unload all loaded units at the specified location. Unit should be a Terran Dropship, Protoss Shuttle, or Zerg Overlord. If the unit is a Terran Bunker, the units will be unloaded right outside the bunker, like in the first version of unloadAll.


See also: [Unit]::[Unit#load load], [Unit]::[Unit#unload unload], [Unit]::[Unit#unloadAll unloadAll], [Unit]::[Unit#getLoadedUnits getLoadedUnits], [Unit]:[Unit#isLoaded isLoaded].

=== cancelConstruction ===
bool cancelConstruction();

Orders the building to stop being constructed.

See also: [Unit]::[Unit#beingConstructed beingConstructed].

=== haltConstruction ===
bool haltConstruction();

Orders the SCV to stop constructing the building, and the building is left in a partially complete state until it is canceled, destroyed, or completed.

See also: [Unit]::[Unit#isConstructing isConstructing].

=== cancelMorph ===
bool cancelMorph();

Orders the unit to stop morphing.

See also: [Unit]::[Unit#morph morph], [Unit]::[Unit#isMorphing isMorphing].

=== cancelTrain ===
bool cancelTrain();

Orders the unit to remove the last unit from its training queue.

See also: [Unit]::[Unit#train train], [Unit]::[Unit#cancelTrain_2 cancelTrain], [Unit]::[Unit#isTraining isTraining], [Unit]::[Unit#getTrainingQueue getTrainingQueue].

=== cancelTrain_2 ===
bool cancelTrain(int slot);

Orders the unit to remove the specified unit from its training queue.

See also: [Unit]::[Unit#train train], [Unit]::[Unit#cancelTrain cancelTrain], [Unit]::[Unit#isTraining isTraining], [Unit]::[Unit#getTrainingQueue getTrainingQueue].

=== cancelAddon ===
bool cancelAddon();

Orders the unit to stop making the addon.

=== cancelResearch ===
bool cancelResearch();

Orders the unit to cancel a research in progress.

See also: [Unit]::[Unit#research research], [Unit]::[Unit#isResearching isResearching], [Unit]::[Unit#getTech getTech].

=== cancelUpgrade ===
bool cancelUpgrade();

Orders the unit to cancel an upgrade in progress.

See also: [Unit]::[Unit#upgrade upgrade], [Unit]::[Unit#isUpgrading isUpgrading], [Unit]::[Unit#getUpgrade getUpgrade].

=== useTech ===
bool useTech([TechType] tech);

Orders the unit to use a tech not requiring a target (ie Stim Pack).
Returns true if it is a valid tech.

=== useTech_2 ===
bool useTech([TechType] tech, Position position);

Orders the unit to use a tech requiring a position target (ie Dark Swarm).
Returns true if it is a valid tech.

=== useTech_3 ===
bool useTech([TechType] tech, Unit{{{*}}} target);

Orders the unit to use a tech requiring a unit target (ie Irradiate).
Returns true if it is a valid tech.