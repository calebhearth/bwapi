=Developing BWAPI=

While we have made a lot of progress on BWAPI, there is still plenty of things which need to be properly tested and improved. If you are interested in developing the BWAPI framework, contact either deathknight13579@aim.com, or lowerlogic@gmail.com, or post on the google group.

While all help is appreciated, at this point we are primarily looking for people who can make unit tests and other test scenarios in order to find and fix bugs.

We are using Visual Studio 2008 SP1. You can download Visual Studio 2008 Express Edition from Microsoft for free at http://www.microsoft.com/express/download/#webInstall

Remember, you don't really need to know C++ to participate. Aside from writing code, participation can include any of the following:
  * Accumulating valuable knowledge about the Starcraft game engine
  * Providing feedback about commits, bugs, and anything else.
  * Organizing the code (ex: making it look pretty and easy to read :) )
  * Fixing some small bugs or including small patches/fixes to the code.
  * Improving/expanding/clarifying the user documentation.

==How to Start Working on BWAPI==

_Note: Only perform steps 3 and 4 if you want to use ChaosLauncher as a loader. BWAPI will work with any other basic loader such as InsectLoader._

  # Obtain an SVN Program. Google has its own instructions for getting an SVN program, but I use TortoiseSVN, which can be found here: http://tortoisesvn.tigris.org/
  # Follow the instructions on the [http://code.google.com/p/bwapi/source/checkout Source] tab for retrieving the source code.
  # Download [http://www.teamliquid.net/forum/viewmessage.php?topic_id=65196 ChaosLauncher]
  # Create a Windows Environment variable called ChaosDir with a value pointing to the Chaos Launcher directory. For instructions on how to create a windows environment variable, read this: http://support.microsoft.com/kb/310519
  # Move the contents of "starcraft-folder" from the source code to your Starcraft Directory.
  # Be sure to compile the entire solution as a RELEASE, else you will run into major problems.
  # If you are a project member you can submit your code modifications. Following the [http://code.google.com/p/bwapi/wiki/CodingStandard coding standard] and make sure BWAPI still compiles and runs before you submit your changes.

== Useful Tools for finding new offsets/hooks ==

  * [http://www.ollydbg.de/ Ollydbg]
  * [http://memoryhacking.com/download.php L. Spiro's Memory Hacking Software]

== How To Create a New Release of BWAPI ==

  # Compile BWTA from latest BWAPI header files.
  # Copy new BWTA LIBs over to new BWAPI release.
  # Open the last release of BWAPI.
  # Copy over the new BWAPI DLLs, BWLs, LIBs, and header files over to new BWAPI release.
  # Update the ChangeLog file with info from the [Changes] page.
  # Update the README file so it has the name of the new release at the top of the file.
  # Compile and test Example AI Module in Release mode and Debug mode. Type /analyze to test BWTA.
  # Compile and test the Example AI Client in Release mode and Debug mode.
  # Remove any extra files that get automatically generated when you open/build the projects.
  # Compress to zip archive.
  # Upload to the Downloads page and mark as Featured.
  # Update Project Home page.