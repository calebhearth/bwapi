#sidebar TableOfContents

Class header file: [http://code.google.com/p/bwapi/source/browse/trunk/bwapi/include/BWAPI/WeaponType.h# BWAPI/WeaponType.h]

Methods:

  * [#getID getID]
  * [#getName getName]
  * [#getTech getTech]
  * [#whatUses whatUses]
  * [#damageAmount damageAmount]
  * [#damageBonus damageBonus]
  * [#damageCooldown damageCooldown]
  * [#damageFactor damageFactor]
  * [#upgradeType upgradeType]
  * [#damageType damageType]
  * [#explosionType explosionType]
  * [#minRange minRange]
  * [#maxRange maxRange]
  * [#innerSplashRadius innerSplashRadius]
  * [#medianSplashRadius medianSplashRadius]
  * [#outerSplashRadius outerSplashRadius]

  * [#targetsAir targetsAir]
  * [#targetsGround targetsGround]
  * [#targetsMechanical targetsMechanical]
  * [#targetsOrganic targetsOrganic]
  * [#targetsNonBuilding targetsNonBuilding]
  * [#targetsNonRobotic targetsNonRobotic]
  * [#targetsTerrain targetsTerrain]
  * [#targetsOrgOrMech targetsOrgOrMech]
  * [#targetsOwn targetsOwn]

Non-member methods in WeaponTypes namespace:

  * [#getWeaponType getWeaponType]
  * [#allWeaponTypes allWeaponTypes]
  * [#normalWeaponTypes normalWeaponTypes]
  * [#specialWeaponTypes specialWeaponTypes]

=== getID ==
int getID() const;

=== getName ===
std::string getName() const;

=== getTech ===
const [TechType]{{{*}}} getTech() const;

=== whatUses ===
const [UnitType]{{{*}}} whatUses() const;

=== damageAmount ===
int damageAmount() const;

=== damageBonus ===
int damageBonus() const;

=== damageCooldown ===
int damageCooldown() const;

=== damageFactor ===
int damageFactor() const;

=== upgradeType ===
const [UpgradeType]{{{*}}} upgradeType() const;

=== damageType ===
const [DamageType]{{{*}}} damageType() const;

=== explosionType ===
const [ExplosionType]{{{*}}} explosionType() const;

=== minRange ===
int minRange() const;

Returns the minimum attack range of the weapon, 0 for most things except WeaponTypes::Arclite_Shock_Cannon (the weapon of the Terran Siege Tank in Siege Mode).

=== maxRange ===
int maxRange() const;

Returns the maximum attack range of the weapon.

=== innerSplashRadius ===
int innerSplashRadius() const;

=== medianSplashRadius ===
int medianSplashRadius() const;

=== outerSplashRadius ===
int outerSplashRadius() const;

=== targetsAir ===
bool targetsAir() const;

Returns true if this weapon can attack air units.

=== targetsGround ===
bool targetsGround() const;

Returns true if this weapon can attack ground units.

=== targetsMechanical ===
bool targets Mechanical() const;

=== targetsOrganic ===
bool targetsOrganic() const;

=== targetsNonBuilding ===
bool targetsNonBuilding() const;

=== targetsNonRobotic ===
bool targetsNonRobotic() const;

=== targetsTerrain ===
bool targetsTerrain() const;

=== targetsOrgOrMech ===
bool targetsOrgOrMech() const;

=== targetsOwn ===
bool targetsOwn() const;

=== getWeaponType ===
[WeaponType] getWeaponType(std::string &name);

Given the name of a weapon, this will return the corresponding weapon type object.

=== allWeaponTypes ===
std::set<[WeaponType]>& allWeaponTypes();

Returns the set of all the [WeaponTypes].

=== normalWeaponTypes ===
std::set<[WeaponType]>& normalWeaponTypes();

Returns the set of all normal weapons in [WeaponTypes].

=== specialWeaponTypes ===
std::set<[WeaponType]>& specialWeaponTypes();

Returns the set of all special weapons in [WeaponTypes].