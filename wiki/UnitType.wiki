#sidebar TableOfContents

Class header file: [http://code.google.com/p/bwapi/source/browse/trunk/bwapi/include/BWAPI/UnitType.h# BWAPI/UnitType.h]

The UnitType class is used to get information about a particular type of unit, such as the build time of a Lurker, or the mineral price of an Ultralisk.

Table of all [UnitTypes] (along with some stat info obtained via BWAPI).

Methods:

  * [#getID getID]
  * [#getName getName]
  * [#getSubLabel getSubLabel]
  * [#getRace getRace]

  * [#whatBuilds whatBuilds]
  * [#requiredUnits requiredUnits]
  * [#requiredTech requiredTech]
  * [#abilities abilities]
  * [#upgrades upgrades]
  * [#armorUpgrade armorUpgrade]

  * [#maxHitPoints maxHitPoints]
  * [#maxShields maxShields]
  * [#maxEnergy maxEnergy]
  * [#armor armor]

  * [#mineralPrice mineralPrice]
  * [#gasPrice gasPrice]
  * [#buildTime buildTime]

  * [#supplyRequired supplyRequired]
  * [#supplyProvided supplyProvided]
  * [#spaceRequired spaceRequired]
  * [#buildScore buildScore]
  * [#destroyScore destroyScore]

  * [#size size]
  * [#tileWidth tileWidth]
  * [#tileHeight tileHeight]
  * [#dimensionLeft dimensionLeft]
  * [#dimensionUp dimensionUp]
  * [#dimensionRight dimensionRight]
  * [#dimensionDown dimensionDown]

  * [#seekRange seekRange]
  * [#sightRange sightRange]
  * [#groundWeapon groundWeapon]
  * [#maxGroundHits maxGroundHits]
  * [#airWeapon airWeapon]
  * [#maxAirHits maxAirHits]

  * [#topSpeed topSpeed]
  * [#acceleration acceleration]
  * [#haltDistance haltDistance]
  * [#turnRadius turnRadius]

  * [#canProduce canProduce]
  * [#canAttack canAttack]
  * [#canMove canMove]
  * [#isFlyer isFlyer]
  * [#regeneratesHP regeneratesHP]
  * [#isSpellcaster isSpellcaster]
  * [#hasPermanentCloak hasPermanentCloak]
  * [#isInvincible isInvincible]
  * [#isOrganic isOrganic]
  * [#isMechanical isMechanical]
  * [#isRobotic isRobotic]
  * [#isDetector isDetector]
  * [#isResourceContainer isResourceContainer]
  * [#isResourceDepot isResourceDepot]
  * [#isRefinery isRefinery]
  * [#isWorker isWorker]
  * [#requiresPsi requiresPsi]
  * [#requiresCreep requiresCreep]
  * [#isTwoUnitsInOneEgg isTwoUnitsInOneEgg]
  * [#isBurrowable isBurrowable]
  * [#isCloakable isCloakable]
  * [#isBuilding isBuilding]
  * [#isAddon isAddon]
  * [#isFlyingBuilding isFlyingBuilding]
  * [#isNeutral isNeutral]

Non-member methods in UnitTypes namespace:

  * [#getUnitType getUnitType]
  * [#allUnitTypes allUnitTypes]

=== getID ===
int getID() const;

Returns a unique ID for this explosion type.

=== getName ===
std::string getName() const;

Returns the name of the unit.

=== getSubLabel ===
std::string getSubLabel() const;

Returns the rank/sublabel of the unit, i.e. Private, Captain, Major, etc.

=== getRace ===
[Race] getRace() const;

Returns the race that the unit belongs to. For example UnitTypes::Terran_SCV.getRace() will return Races::Terran.

=== whatBuilds ===
const std::pair< const [UnitType]{{{*}}}, int > whatBuilds() const;

Returns what builds this unit type. The second number will usually be 1 unless the unit type is Protoss_Archon or Protoss_Dark_Archon. Units that cannot be created, such as critters and mineral fields, will return a pair where the unit type is UnitTypes::None, and the second component is 0.

Example: UnitTypes::Terran_Marine.whatBuilds() will return an std::pair, where the first component is UnitTypes::Terran_Barracks.

=== requiredUnits ===
const std::map< const [UnitType]{{{*}}}, int > requiredUnits() const;

Returns the units the player is required to have before it can train or build the given unit type.

Example: UnitTypes::Terran_Battlecruiser.requiredUnits() will return a map of three keys: UnitTypes::Terran_Starport, UnitTypes::Terran_Control_Tower, and UnitTypes::Terran_Physics_Lab.

=== requiredTech ===
[TechType]{{{*}}} requiredTech() const;

Included in the API for completeness, since the only units that actually needs tech to be trained are the Zerg_Lurker and Zerg_Lurker_Egg. The tech type needed is TechTypes::Lurker_Aspect.

=== abilities ===
const std::set< const [TechType]{{{*}}} >& abilities() const;

Returns the set of tech types this unit can use, provided the tech types have been researched and the unit has enough energy.

=== upgrades ===
const std::set< const [UpgradeType]{{{*}}} >& upgrades() const;

Returns the set of upgrade types that can affect this unit.

=== armorUpgrade ===
[UpgradeType]{{{*}}} armorUpgrade() const;

Returns the upgrade that increase's the unit's armor, or UpgradeTypes::None if no upgrade increase's this unit's armor. For example UnitTypes::Terran_Marine.armorUpgrade() will return a pointer to UpgradeTypes::Terran_Infantry_Armor.

=== maxHitPoints ===
int maxHitPoints() const;

Returns the maximum amount of hit points the unit type can have. This is also the amount of hit points a unit of this type has when it is first created.

=== maxShields ===
int maxShields() const;

Returns the maximum amount of shields the unit type can have.

=== maxEnergy ===
int maxEnergy() const;

Returns the maximum amount of energy the unit type can have.

=== armor ===
int armor() const;

Returns the amount of armor the non-upgraded unit type has.

=== mineralPrice ===
int mineralPrice() const;

Returns the mineral price of the unit. Example: UnitTypes::Siege_Tank_Tank_Mode.mineralPrice() returns 150.

=== gasPrice ===
int gasPrice() const;

UnitTypes::Siege_Tank_Tank_Mode.gasPrice() returns 100.

=== buildTime ===
int buildTime() const;

Returns the number of frames needed to make this unit type.

=== supplyRequired ===
int supplyRequired() const;

Returns the amount of supply used by this unit. Supply counts returned by BWAPI are double what you would expect to see from playing the game. This is because zerglings take up 0.5 in-game supply.

=== supplyProvided ===
int supplyProvided() const;

Returns the amount of supply produced by this unit (i.e. for a Protoss_Pylon). Supply counts returned by BWAPI are double what you would expect to see from playing the game. This is because zerglings take up 0.5 in-game supply.

=== spaceRequired ===
int spaceRequired() const;

Returns the amount of space this unit type takes up inside a bunker or transport unit.

=== spaceProvided ===
int spaceProvided() const;

Returns the amount of space this unit type provides.

=== buildScore ===
int buildScore() const;

Returns the score which is used to determine the total scores in the after-game stats screen.

=== destroyScore ===
int destroyScore() const;

Returns the score which is used to determine the total scores in the after-game stats screen.

=== size ===
[UnitSizeType] size() const;

Returns the size of the unit - either Small, Medium, Large, or Independent.

=== tileWidth ===
int tileWidth() const;

Returns the tile width of the unit. Useful for determining the size of buildings. For example UnitTypes::Terran_Supply_Depot.tileWidth() will return 3.

=== tileHeight ===
int tileHeight() const;

Returns the tile height of the unit. Useful for determining the size of buildings. For example UnitTypes::Terran_Supply_Depot.tileHeight() will return 2.

=== dimensionLeft ===
int dimensionLeft() const;

Distance from the center of the unit to the left edge of the unit, measured in pixels.

=== dimensionUp ===
int dimensionUp() const;

Distance from the center of the unit to the top edge of the unit, measured in pixels.

=== dimensionRight ===
int dimensionRight() const;

Distance from the center of the unit to the right edge of the unit, measured in pixels.

=== dimensionDown===
int dimensionDown() const;

Distance from the center of the unit to the bottom edge of the unit, measured in pixels.

=== seekRange ===
int seekRange() const;

Returns the range at which the unit will start targeting enemy units.

=== sightRange ===
int sightRange() const;

Returns how far the unupgraded unit type can see into the fog of war.

=== groundWeapon ===
const [WeaponType]{{{*}}} groundWeapon() const;

Returns the unit's ground weapon.

=== maxGroundHits ===
int maxGroundHits() const;

=== airWeapon ===
const [WeaponType]{{{*}}} airWeapon() const;

Returns the unit's air weapon.

=== maxAirHits ===
int maxAirHits() const;

=== topSpeed ===
int topSpeed() const;

Returns the unit's top speed.

=== acceleration ===
int acceleration() const;

Returns how fast the unit can accelerate to its top speed.

=== haltDistance ===
int haltDistance() const;

=== turnRadius ===
int turnRadius() const;

=== canProduce ===
bool canProduce() const;

Returns true if the unit can train other units. For example, UnitTypes::Terran_Barracks.canProduce() will return true, while UnitTypes::Terran_Marine.canProduce() will return false.

=== canAttack ===
bool canAttack() const;

Returns true if the unit has the ability to attack (either ground or air).

=== canMove ===
bool canMove() const;

Returns true if the unit can move. Note that buildings will return false, even Terran buildings which can move once lifted.

=== isFlyer ===
bool isFlyer() const;

Returns true for flying/air units.

=== regeneratesHP ===
bool regeneratesHP() const;

Returns true for units that regenerate health (i.e. zerg units).

=== isSpellcaster ===
bool isSpellcaster() const;

Returns true if the unit type is capable of casting spells.

=== hasPermanentCloak ===
bool hasPermanentCloak() const;

Returns true for units that are permanently cloaked (i.e. Protoss Observer, Protoss Dark Templar).

=== isInvincible ===
bool isInvincible() const;

Returns true for units that cannot be destroyed (i.e. Mineral Fields, Vespene Geysers)

=== isOrganic ===
bool isOrganic() const;

Returns true if the unit is organic, such as a Terran Marine.

=== isMechanical ===
bool isMechanical() const;

Returns true if the unit is mechanical such as a Terran Vulture.

=== isRobotic ===
bool isRobotic() const;

Returns true if the unit type is robotic.

=== isDetector ===
bool isDetector() const;

Returns true for units that can detect cloaked units.

=== isResourceContainer ===
bool isResourceContainer() const;

Returns true for units that hold resources (i.e. Mineral Field, Vespene Geyser, Terran Refinery).

=== isResourceDepot ===
bool isResourceDepot() const;

Returns true for units that can accept resources (i.e. Terran Command Center).

=== isRefinery ===
bool isRefinery() const;

Returns true for Terran Refinery, Zerg Extractor, and Protoss Assimilator.

=== isWorker ===
bool isWorker() const;

Returns true if the unit is a Protoss Probe, Terran SCV, or Zerg Drone.

=== requiresPsi ===
bool requiresPsi() const;

Returns true for buildings that must be near a pylon to be constructed.

=== requiresCreep ===
bool requiresCreep() const;

Returns true for buildings that can only be built on zerg creep.

=== isTwoUnitsInOneEgg ===
bool isTwoUnitsInOneEgg() const;

Returns true for Zerglings.

=== isBurrowable ===
bool isBurrowable() const;

Returns true for units that can burrow when burrow tech is researched.

=== isCloakable ===
bool isCloakable() const;

Returns true for units that can cloak (not indirectly via Arbiter).

=== isBuilding ===
bool isBuilding() const;

Returns true if the unit is a building.

=== isAddon ===
bool isAddon() const;

Returns true if the unit is a an add-on, such as a Terran Comsat Station.

=== isFlyingBuilding ===
bool isFlyingBuilding() const;

Returns true for Terran buildings that can lift off (i.e. Barracks).

=== isNeutral ===
bool isNeutral() const;

Returns true if the unit is neutral, such as a critter or mineral field.

=== getUnitType ===
[UnitType] getUnitType(std::string &name);

Given the name of a unit type, this function will return the unit type.

For example, UnitTypes::getUnitType("Terran Marine") will return UnitTypes::Terran_Marine.

=== allUnitTypes ===
std::set<[UnitType]>& allUpgradeTypes();

Returns the set of all the UnitTypes.