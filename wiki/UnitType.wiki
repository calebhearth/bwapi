#sidebar TableOfContents

Class header file: [http://code.google.com/p/bwapi/source/browse/trunk/bwapi/include/BWAPI/UnitType.h# BWAPI/UnitType.h]

The UnitType class is used to get information about a particular type of unit, such as the build time of a Lurker, or the mineral price of an Ultralisk.

Methods:

  * [#getID getID]
  * [#getName getName]
  * [#getRace getRace]
  * [#whatBuilds whatBuilds]
  * [#requiredUnits requiredUnits]
  * [#requiredTech requiredTech]
  * [#suppliesConsumed suppliesConsumed]
  * [#suppliesProduced suppliesProduced]
  * [#maxHealth maxHealth]
  * [#maxShield maxShield]
  * [#maxEnergy maxEnergy]
  * [#mineralPrice mineralPrice]
  * [#gasPrice gasPrice]
  * [#armor armor]
  * [#buildTime buildTime]
  * [#dimensionLeft dimensionLeft]
  * [#dimensionUp dimensionUp]
  * [#dimensionRight dimensionRight]
  * [#dimensionDown dimensionDown]
  * [#tileWidth tileWidth]
  * [#tileHeight tileHeight]
  * [#damageFactor damageFactor]
  * [#groundDamage groundDamage]
  * [#canProduce canProduce]
  * [#canAttack canAttack]
  * [#canMove canMove]
  * [#isWorker isWorker]
  * [#isBuilding isBuilding]
  * [#isAddon isAddon]
  * [#isFlyer isFlyer]
  * [#isNeutral isNeutral]
  * [#isOrganic isOrganic]
  * [#isMechanical isMechanical]

Non-member methods in UnitTypes namespace:

  * [#getUnitType getUnitType]
  * [#allUnitTypes allUnitTypes]

=== getID ===
int getID();

=== getName ===
std::string getName();

=== getRace ===
[Race] getRace();

=== whatBuilds ===
std::pair< [UnitType]{{{*}}}, int > whatBuilds();

Returns what builds this unit type. The second number will always be one unless the unit type is Protoss_Archon or Protoss_Dark_Archon.

=== requiredUnits ===
std::map< [UnitType]{{{*}}}, int > requiredUnits();

Returns the units the player is required to have before it can train or build the given unit type.

=== requiredTech ===
[TechType]{{{*}}} requiredTech();

The only unit that needs tech to be created is the Zerg_Lurker.

=== suppliesConsumed ===
int suppliesConsumed();

Returns the amount of supply used by this unit.

=== suppliesProduced ===
int suppliesProduced();

Returns the amount of supply produced by this unit (i.e. for a Protoss_Pylon).

=== maxHealth ===
int maxHealth();

=== maxShield ===
int maxShield();

=== maxEnergy ===
int maxEnergy();

Not implemented yet.

=== mineralPrice ===
int mineralPrice();

=== gasPrice ===
int gasPrice();

=== armor ===
int armor();

=== buildTime ===
int buildTime();

=== dimensionLeft ===
int dimensionLeft();

=== dimensionUp ===
int dimensionUp();

=== dimensionRight ===
int dimensionRight();

=== dimensionDown===
int dimensionDown();

=== tileWidth ===
int tileWidth();

=== tileHeight ===
int tileHeight();

=== damageFactor ===
int damageFactor();

=== groundDamage ===
int groundDamage();

=== canProduce ===
bool canProduce();

=== canAttack ===
bool canAttack();

=== canMove ===
bool canMove();

=== isWorker ===
bool isWorker();

=== isBuilding ===
bool isBuilding();

=== isAddon ===
bool isAddon();

=== isFlyer ===
bool isFlyer();

=== isNeutral ===
bool isNeutral();

=== isOrganic ===
bool isOrganic();

=== isMechanical ===
bool isMechanical();

=== getUnitType ===
[UnitType] getUnitType(std::string &name);

=== allUnitTypes ===
std::set<[UnitType]>& allUpgradeTypes();

Returns the set of all the unit types, which are listed below.

== UnitTypes ==

  * Terran_Marine
  * Terran_Medic
  * Terran_Firebat
  * Terran_Ghost
  * Terran_Vulture
  * Terran_Goliath
  * Terran_Siege_Tank_Tank_Mode
  * Terran_SCV
  * Terran_Wraith
  * Terran_Science_Vessel
  * Terran_Dropship
  * Terran_Battlecruiser
  * Terran_Vulture_Spider_Mine
  * Terran_Nuclear_Missile
  * Terran_Siege_Tank_Siege_Mode
  * Terran_Valkyrie
  * Terran_Command_Center
  * Terran_Comsat_Station
  * Terran_Nuclear_Silo
  * Terran_Supply_Depot
  * Terran_Refinery
  * Terran_Barracks
  * Terran_Academy
  * Terran_Factory
  * Terran_Starport
  * Terran_Control_Tower
  * Terran_Science_Facility
  * Terran_Covert_Ops
  * Terran_Physics_Lab
  * Terran_Machine_Shop
  * Terran_Engineering_Bay
  * Terran_Armory
  * Terran_Missile_Turret
  * Terran_Bunker

  * Zerg_Larva
  * Zerg_Egg
  * Zerg_Zergling
  * Zerg_Hydralisk
  * Zerg_Ultralisk
  * Zerg_Broodling
  * Zerg_Drone
  * Zerg_Overlord
  * Zerg_Mutalisk
  * Zerg_Guardian
  * Zerg_Queen
  * Zerg_Defiler
  * Zerg_Scourge
  * Zerg_Infested_Terran
  * Zerg_Cocoon
  * Zerg_Devourer
  * Zerg_Infested_Command_Center
  * Zerg_Hatchery
  * Zerg_Lair
  * Zerg_Hive
  * Zerg_Nydus_Canal
  * Zerg_Hydralisk_Den
  * Zerg_Defiler_Mound
  * Zerg_Greater_Spire
  * Zerg_Queens_Nest
  * Zerg_Evolution_Chamber
  * Zerg_Ultralisk_Cavern
  * Zerg_Spire
  * Zerg_Spawning_Pool
  * Zerg_Creep_Colony
  * Zerg_Spore_Colony
  * Zerg_Sunken_Colony
  * Zerg_Extractor
  * Zerg_Lurker_Egg
  * Zerg_Lurker

  * Protoss_Corsair
  * Protoss_Dark_Templar
  * Protoss_Dark_Archon
  * Protoss_Probe
  * Protoss_Zealot
  * Protoss_Dragoon
  * Protoss_High_Templar
  * Protoss_Archon
  * Protoss_Shuttle
  * Protoss_Scout
  * Protoss_Arbiter
  * Protoss_Carrier
  * Protoss_Interceptor
  * Protoss_Reaver
  * Protoss_Observer
  * Protoss_Scarab
  * Protoss_Nexus
  * Protoss_Robotics_Facility
  * Protoss_Pylon
  * Protoss_Assimilator
  * Protoss_Observatory
  * Protoss_Gateway
  * Protoss_Photon_Cannon
  * Protoss_Citadel_of_Adun
  * Protoss_Cybernetics_Core
  * Protoss_Templar_Archives
  * Protoss_Forge
  * Protoss_Stargate
  * Protoss_Fleet_Beacon
  * Protoss_Arbiter_Tribunal
  * Protoss_Robotics_Support_Bay
  * Protoss_Shield_Battery

  * Critter_Rhynadon
  * Critter_Bengalaas
  * Critter_Scantid
  * Critter_Kakaru
  * Critter_Ragnasaur
  * Critter_Ursadon

  * Resource_Mineral_Field
  * Resource_Vespene_Geyser

  * Spell_Scanner_Sweep
  * Spell_Dark_Swarm
  * Spell_Disruption_Web

  * None
  * Unknown