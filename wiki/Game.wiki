#sidebar TableOfContents

Class header file: [http://code.google.com/p/bwapi/source/browse/trunk/bwapi/include/BWAPI/Game.h# BWAPI/Game.h]

The abstract Game class is implemented by BWAPI and offers many methods for retrieving information about the current Broodwar game, including the set of players, units, map information, as well as information about the user, such as mouse position, screen position, and the current selection of units.

Methods:

  * [#getForces getForces]
  * [#getPlayers getPlayers]
  * [#getAllUnits getAllUnits]
  * [#getMinerals getMinerals]
  * [#getGeysers getGeysers]
  * [#getNeutralUnits getNeutralUnits]

  * [#getLatency getLatency]
  * [#getFrameCount getFrameCount]
  * [#getMouseX getMouseX]
  * [#getMouseY getMouseY]
  * [#getScreenX getScreenX]
  * [#getScreenY getScreenY]
  * [#isFlagEnabled isFlagEnabled]
  * [#enableFlag enableFlag]
  * [#unitsOnTile unitsOnTile]
  * [#getLastError getLastError]

  * [#mapWidth mapWidth]
  * [#mapHeight mapHeight]
  * [#mapFilename mapFilename]
  * [#mapName mapName]
  * [#buildable buildable]
  * [#walkable walkable]
  * [#visible visible]
  * [#hasCreep hasCreep]
  * [#hasPower hasPower]
  * [#canBuildHere canBuildHere]
  * [#canMake canMake]
  * [#canResearch canResearch]
  * [#canUpgrade canUpgrade]
  * [#groundHeight groundHeight]
  * [#getStartLocations getStartLocations]
  * [#getMapHash getMapHash]

  * [#printf printf]
  * [#sendText sendText]
  * [#changeRace changeRace]
  * [#inReplay inReplay]
  * [#startGame startGame]
  * [#pauseGame pauseGame]
  * [#resumeGame resumeGame]
  * [#surrender surrender]
  * [#getSelectedUnits getSelectedUnits]
  * [#self self]
  * [#enemy enemy]

  * [#drawBox drawBox]
  * [#drawCircle drawCircle]
  * [#drawEllipse drawEllipse]
  * [#drawDot drawDot]
  * [#drawLine drawLine]
  * [#drawTriangle drawTriangle]

=== getForces ===
std::set< [Force]{{{*}}} > getForces() const;

Returns the set of all forces in the match.

=== getPlayers ===
std::set< [Player]{{{*}}} > getPlayers() const;

Returns the set of all players in the match. Note that this includes the Neutral player, which owns all the neutral units such as minerals, critters, etc.

=== getAllUnits ===
std::set< [Unit]{{{*}}} > getAllUnits() const;

Returns all the visible units. If [Flag]::CompleteMapInformation is enabled, the set of all units is returned, not just visible ones. Note that units inside refineries are not included in this set yet.

=== getMinerals ===
std::set< [Unit]{{{*}}} > getMinerals() const;

Returns the set of all visible mineral patches, or all mineral patches if [Flag]::CompleteMapInformation is enabled.

=== getGeysers ===
std::set< [Unit]{{{*}}} > getGeysers() const;

Returns the set of all visible vespene geysers, or all vespene geysers if [Flag]::CompleteMapInformation is enabled.

=== getNeutralUnits ===
std::set< [Unit]{{{*}}} > getNeutralUnits() const;

Returns the set of all visible neutral units, or all neutral units if [Flag]::CompleteMapInformation is enabled.

=== getLatency ===
Latency::Enum getLatency() const;

Returns the amount of latency the current game has. Currently only returns Latency::SinglePlayer, Latency::LanLow, Latency::LanMedium, or Latency::LanHigh.

=== getFrameCount ===
int getFrameCount() const;

Returns the number of logical frames since the match started.

=== getMouseX ===
int getMouseX() const;

Returns the horizontal coordinate of the mouse on the screen.

=== getMouseY ===
int getMouseY() const;

Returns the vertical coordinate of the mouse on the screen.

=== getScreenX ===
int getScreenX() const;

Returns the horizontal coordinate of the screen on the map.

=== getScreenY ===
int getScreenY() const;

Returns the vertical coordinate of the screen on the map.

=== isFlagEnabled ===
bool isFlagEnabled([Misc#Flag::Enum Flag::Enum] flag) const;

Returns true if the given flag has been enabled. Note that flags can only be enabled at the beginning of a match, during the [AIModule]::onStart callback.

=== enableFlag ===
void enableFlag([Misc#Flag::Enum Flag::Enum] flag);

Enables the specified flag. Note that flags can only be enabled at the beginning of a match, during the [AIModule]::onStart callback.

=== unitsOnTile ===
std::set< [Unit]{{{*}}} > unitsOnTile([Misc#TilePosition TilePosition] tile) const;

Returns the set of units that are on the given tile.

=== getLastError ===
[Error] getLastError() const;

Returns the last error that was set. If you try to order enemy units around, or morph bunkers into lurkers, BWAPI will set error codes, which can be retrieved using this function.

=== mapWidth ===
int mapWidth() const;

Returns the width of the current map, in build tile units. To get the width of the current map in walk tile units, multiply by 4. To get the width of the current map in [Misc#Position Position] units, multiply by [Misc#Constants TILE_SIZE].

=== mapHeight ===
int mapHeight() const;

Returns the height of the current map, in build tile units. To get the height of the current map in walk tile units, multiply by 4. To get the height of the current map in [Misc#Position Position] units, multiply by [Misc#Constants TILE_SIZE].

=== mapFilename ===
std::string mapFilename() const;

Returns the file name of the current map.

=== mapName ===
std::string mapName() const;

Returns the name of the current map.

=== buildable ===
bool buildable(int x, int y) const;

Returns true if the specified build tile is buildable. Note that this just uses the static map data. You will also need to make sure no ground units on the tile to see if its currently buildable. To do this, see [#unitsOnTile unitsOnTile].

=== walkable ===
bool walkable(int x, int y) const;

Returns true if the specified build tile is walkable. The values of x and y are in walk tile coordinates (different from build tile coordinates). Note that this just uses the static map data. You will also need to make sure no ground units are on the tile to see if its currently walkable. To do this, see [#unitsOnTile unitsOnTile].

=== visible ===
bool visible(int x, int y) const;

Returns true if the specified build tile is visible. If the tile is concealed by fog of war, the function will return false.

=== hasCreep ===
bool hasCreep(int x, int y) const;

Returns true if the specified build tile has zerg creep on it.

=== hasPower ===
bool hasPower(int x, int y, int tileWidth, int tileHeight) const;

Returns true if the given build location is powered by a nearby friendly pylon.

=== canBuildHere ===
bool canBuildHere([Unit]{{{*}}} builder, [Misc#TilePosition TilePosition] position, [UnitType] type)

Returns true if the given unit type can be built at the given location. If builder is not null, the unit will be discarded when determining whether or not any ground units are blocking the build location.

=== canMake ===
bool canMake([Unit]{{{*}}} builder, [UnitType] type)

Returns true if the AI player has enough resources, supply, tech, and required units in order to make the given unit type. If builder is not null, canMake will return true only if the builder unit can build the given unit type.

=== canResearch ===
bool canResearch([Unit]{{{*}}} unit, [TechType] type)

Returns true if the AI player has enough resources required to research the given tech type. If unit is not null, canResearch will return true only if the given unit can research the given tech type.

=== canUpgrade ===
bool canUpgrade([Unit]{{{*}}} unit, [UpgradeType] type)

Returns true if the AI player has enough resources required to upgrade the given upgrade type. If unit is not null, canUpgrade will return true only if the given unit can upgrade the given upgrade type.

=== groundHeight ===
int groundHeight(int x, int y) const;

Returns the ground height of the given walk tile. 0 = normal, 1 = high ground.

=== getStartLocations ===
const std::set< [Misc#TilePosition TilePosition] >& getStartLocations() const;

Returns the set of starting locations for the given map. To determine the starting location for the players in the current match, see [Player]::[Player#getStartLocation getStartLocation].

=== getMapHash ===
int getMapHash() const;

Returns a unique identifier for the given map data that does not depend on the file name.

=== printf ===
void printf(const char {{{*}}}text, ...);

Prints text on the screen. Text is not sent to other players in multiplayer games.

=== sendText ===
void sendText(const char {{{*}}}text, ...);

Sends text to other players - as if it were entered in chat. In single player games and replays, this will just print the text on the screen.

=== text ===
void text([Misc#CoordinateType::Enum CoordinateType::Enum] ctype, int x, int y, const char{{{*}}} text, ...);

Draws text on the screen at the given position.

=== changeRace ===
void changeRace([Race] race);

Used to change the race while in a lobby. Note that there is no onLobbyEnter callback yet, so this function cannot be used at this time.

=== inReplay ===
void inReplay() const;

Returns true if Broodwar is playing a replay.

=== startGame ===
void startGame();

Used to start the game while in a lobby. Note that there is no onLobbyEnter callback yet, so this function cannot be used at this time.

=== pauseGame ===
void pauseGame();

=== resumeGame ===
void resumeGame();

=== surrender ===
void surrender();

Surrenders the match and goes to the after-game stats screen. Sometimes this method crashes Broodwar, so we recommend that you don't use it yet.

=== getSelectedUnits ===
std::set<[Unit]{{{*}}}>& getSelectedUnits() const;

Returns the set of units currently selected by the user in the GUI. If [Flag]::UserInput was not enabled during the [AIModule]::[AIModule#onStart onStart] callback, this function will always return an empty set.

=== self ===
[Player]{{{*}}} self() const;

Returns a pointer to the player that BWAPI controls.

=== enemy ===
[Player]{{{*}}} enemy() const;

Returns a pointer to the enemy player. If there is more than one enemy, this returns a pointer to just one enemy (see [#getPlayers getPlayers] to get the other enemies).

=== drawBox ===
void drawBox([Misc#CoordinateType::Enum CoordinateType::Enum] ctype, int left, int top, int right, int bottom, [Color] color, bool isSolid);

Draws a box on the screen, with the given color. If isSolid is true, the entire box will be rendered, otherwise just the outline will be drawn.

=== drawCircle ===
void drawCircle([Misc#CoordinateType::Enum CoordinateType::Enum] ctype, int x, int y, int radius, [Color] color, bool isSolid);

Draws a circle on the screen, with the given color. If isSolid is true, a solid circle is drawn, otherwise just the outline of a circle will be drawn.

=== drawEllipse ===
void drawEllipse([Misc#CoordinateType::Enum CoordinateType::Enum] ctype, int x, int y, int xrad, int yrad, [Color] color, bool isSolid);

Draws an ellipse on the screen, with the given color. If isSolid is true, a solid ellipse is drawn, otherwise just the outline of an ellipse will be drawn.

=== drawDot ===
void drawDot([Misc#CoordinateType::Enum CoordinateType::Enum] ctype, int x, int y, [Color] color);

Draws a dot on the screen at the given position with the given color.

=== drawLine ===
drawLine([Misc#CoordinateType::Enum CoordinateType::Enum] ctype, int x1, int y1, int x2, int y2, [Color] color);

Draws a line on the screen from (x1,y1) to (x2,y2) with the given color.

=== drawTriangle ===
drawTriangle([Misc#CoordinateType::Enum CoordinateType::Enum] ctype, int x1, int y1, int x2, int y2, int x3, int y3, [Color] color, bool isSolid);

Draws a triangle on the screen. If isSolid is true, a solid triangle is drawn, otherwise the just the outline of the triangle will be draw.