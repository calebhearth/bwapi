#sidebar TableOfContents

Class header file: [http://code.google.com/p/bwapi/source/browse/trunk/bwapi/include/BWAPI/Game.h# BWAPI/Game.h]

The abstract Game class is implemented by BWAPI and offers many methods for retrieving information about the current Broodwar game, including the set of players, units, map information, as well as information about the user, such as mouse position, screen position, and the current selection of units. Methods:


  * [#getForces getForces]
  * [#getPlayers getPlayers]
  * [#getAllUnits getAllUnits]
  * [#getMinerals getMinerals]
  * [#getGeysers getGeysers]
  * [#getNeutralUnits getNeutralUnits]

  * [#getLatency getLatency]
  * [#getFrameCount getFrameCount]
  * [#getMouseX getMouseX]
  * [#getMouseY getMouseY]
  * [#getScreenX getScreenX]
  * [#getScreenY getScreenY]
  * [#isFlagEnabled isFlagEnabled]
  * [#enableFlag enableFlag]
  * [#unitsOnTile unitsOnTile]

  * [#mapWidth mapWidth]
  * [#mapHeight mapHeight]
  * [#mapFilename mapFilename]
  * [#mapName mapName]
  * [#buildable buildable]
  * [#walkable walkable]
  * [#visible visible]
  * [#groundHeight groundHeight]
  * [#getStartLocations getStartLocations]
  * [#getMapHash getMapHash]

  * [#print print]
  * [#printPublic printPublic]
  * [#changeRace changeRace]
  * [#startGame startGame]
  * [#pauseGame pauseGame]
  * [#resumeGame resumeGame]
  * [#getSelectedUnits getSelectedUnits]
  * [#self self]
  * [#enemy enemy]


=== getForces ===
std::set< [Force]{{{*}}} > getForces() const;

=== getPlayers ===
std::set< [Player]{{{*}}} > getPlayers() const;

=== getAllUnits ===
std::set< [Unit]{{{*}}} > getAllUnits() const;

=== getMinerals ===
std::set< [Unit]{{{*}}} > getMinerals() const;

=== getGeysers ===
std::set< [Unit]{{{*}}} > getGeysers() const;

=== getNeutralUnits ===
std::set< [Unit]{{{*}}} > getNeutralUnits() const;

=== getLatency ===
Latency::Enum getLatency() const;

=== getFrameCount ===
int getFrameCount() const;

=== getMouseX ===
int getMouseX() const;

=== getMouseY ===
int getMouseY() const;

=== getScreenX ===
int getScreenX() const;

=== getScreenY ===
int getScreenY() const;

=== isFlagEnabled ===
bool isFlagEnabled([Misc#Flag::Enum Flag::Enum] flag) const;

=== enableFlag ===
void enableFlag([Misc#Flag::Enum Flag::Enum] flag);

Enables the specified flag. Note that flags can only be enabled at the beginning of a match, during the [AIModule]::onStart callback.

=== unitsOnTile ===
std::set< [Unit]{{{*}}} > unitsOnTile([Misc#TilePosition TilePosition] tile) const;

=== mapWidth ===
int mapWidth() const;

=== mapHeight ===
int mapHeight() const;

=== mapFilename ===
std::string mapFilename() const;

=== mapName ===
std::string mapName() const;

=== buildable ===
bool buildable(int x, int y) const;

=== walkable ===
bool walkable(int x, int y) const;

=== visible ===
bool visible(int x, int y) const;

=== groundHeight ===
int groundHeight(int x, int y) const;

=== getStartLocations ===
const std::set< [Misc#TilePosition TilePosition] >& getStartLocations() const;

Returns the set of starting locations for the given map. To determine the starting location for the players in the current match, see [Player]::[Player#getStartLocation getStartLocation].

=== getMapHash ===
int getMapHash() const;

=== print ===
int print(const char {{{*}}}text, ...);

=== printPublic ===
int printPublic(const char {{{*}}}text, ...);

=== changeRace ===
void changeRace([Race] race);

=== startGame ===
void startGame();

=== pauseGame ===
void pauseGame();

=== resumeGame ===
void resumeGame();

=== getSelectedUnits ===
std::set<[Unit]{{{*}}}>& getSelectedUnits() const;

Returns the set of units currently selected by the user in the GUI.

=== self ===
[Player]{{{*}}} self() const;

Returns a pointer to the player that BWAPI controls.

=== enemy ===
[Player]{{{*}}} enemy() const;

Returns a pointer to the enemy player. If there is more than one enemy, this returns a pointer to just one enemy (see [#getPlayers getPlayers] to get the other enemies).